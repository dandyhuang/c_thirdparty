// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtrs_expinfo.proto

#ifndef PROTOBUF_INCLUDED_rtrs_5fexpinfo_2eproto
#define PROTOBUF_INCLUDED_rtrs_5fexpinfo_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtrs_5fexpinfo_2eproto 

namespace protobuf_rtrs_5fexpinfo_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_rtrs_5fexpinfo_2eproto
namespace so_rtrs {
class AlgMultiTestInfo;
class AlgMultiTestInfoDefaultTypeInternal;
extern AlgMultiTestInfoDefaultTypeInternal _AlgMultiTestInfo_default_instance_;
class AlgMultiTestInfo_MapParamsEntry_DoNotUse;
class AlgMultiTestInfo_MapParamsEntry_DoNotUseDefaultTypeInternal;
extern AlgMultiTestInfo_MapParamsEntry_DoNotUseDefaultTypeInternal _AlgMultiTestInfo_MapParamsEntry_DoNotUse_default_instance_;
}  // namespace so_rtrs
namespace google {
namespace protobuf {
template<> ::so_rtrs::AlgMultiTestInfo* Arena::CreateMaybeMessage<::so_rtrs::AlgMultiTestInfo>(Arena*);
template<> ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace so_rtrs {

// ===================================================================

class AlgMultiTestInfo_MapParamsEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<AlgMultiTestInfo_MapParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<AlgMultiTestInfo_MapParamsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AlgMultiTestInfo_MapParamsEntry_DoNotUse();
  AlgMultiTestInfo_MapParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AlgMultiTestInfo_MapParamsEntry_DoNotUse& other);
  static const AlgMultiTestInfo_MapParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlgMultiTestInfo_MapParamsEntry_DoNotUse*>(&_AlgMultiTestInfo_MapParamsEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class AlgMultiTestInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AlgMultiTestInfo) */ {
 public:
  AlgMultiTestInfo();
  virtual ~AlgMultiTestInfo();

  AlgMultiTestInfo(const AlgMultiTestInfo& from);

  inline AlgMultiTestInfo& operator=(const AlgMultiTestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AlgMultiTestInfo(AlgMultiTestInfo&& from) noexcept
    : AlgMultiTestInfo() {
    *this = ::std::move(from);
  }

  inline AlgMultiTestInfo& operator=(AlgMultiTestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AlgMultiTestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlgMultiTestInfo* internal_default_instance() {
    return reinterpret_cast<const AlgMultiTestInfo*>(
               &_AlgMultiTestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AlgMultiTestInfo* other);
  friend void swap(AlgMultiTestInfo& a, AlgMultiTestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AlgMultiTestInfo* New() const final {
    return CreateMaybeMessage<AlgMultiTestInfo>(NULL);
  }

  AlgMultiTestInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AlgMultiTestInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AlgMultiTestInfo& from);
  void MergeFrom(const AlgMultiTestInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlgMultiTestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> mapParams = 3;
  int mapparams_size() const;
  void clear_mapparams();
  static const int kMapParamsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      mapparams() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_mapparams();

  // string expName = 5;
  void clear_expname();
  static const int kExpNameFieldNumber = 5;
  const ::std::string& expname() const;
  void set_expname(const ::std::string& value);
  #if LANG_CXX11
  void set_expname(::std::string&& value);
  #endif
  void set_expname(const char* value);
  void set_expname(const char* value, size_t size);
  ::std::string* mutable_expname();
  ::std::string* release_expname();
  void set_allocated_expname(::std::string* expname);

  // int32 testID = 1;
  void clear_testid();
  static const int kTestIDFieldNumber = 1;
  ::google::protobuf::int32 testid() const;
  void set_testid(::google::protobuf::int32 value);

  // int32 ruleID = 2;
  void clear_ruleid();
  static const int kRuleIDFieldNumber = 2;
  ::google::protobuf::int32 ruleid() const;
  void set_ruleid(::google::protobuf::int32 value);

  // uint64 pageid = 6;
  void clear_pageid();
  static const int kPageidFieldNumber = 6;
  ::google::protobuf::uint64 pageid() const;
  void set_pageid(::google::protobuf::uint64 value);

  // uint32 expLayer = 4;
  void clear_explayer();
  static const int kExpLayerFieldNumber = 4;
  ::google::protobuf::uint32 explayer() const;
  void set_explayer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.AlgMultiTestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      AlgMultiTestInfo_MapParamsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > mapparams_;
  ::google::protobuf::internal::ArenaStringPtr expname_;
  ::google::protobuf::int32 testid_;
  ::google::protobuf::int32 ruleid_;
  ::google::protobuf::uint64 pageid_;
  ::google::protobuf::uint32 explayer_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtrs_5fexpinfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AlgMultiTestInfo

// int32 testID = 1;
inline void AlgMultiTestInfo::clear_testid() {
  testid_ = 0;
}
inline ::google::protobuf::int32 AlgMultiTestInfo::testid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AlgMultiTestInfo.testID)
  return testid_;
}
inline void AlgMultiTestInfo::set_testid(::google::protobuf::int32 value) {
  
  testid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AlgMultiTestInfo.testID)
}

// int32 ruleID = 2;
inline void AlgMultiTestInfo::clear_ruleid() {
  ruleid_ = 0;
}
inline ::google::protobuf::int32 AlgMultiTestInfo::ruleid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AlgMultiTestInfo.ruleID)
  return ruleid_;
}
inline void AlgMultiTestInfo::set_ruleid(::google::protobuf::int32 value) {
  
  ruleid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AlgMultiTestInfo.ruleID)
}

// map<string, string> mapParams = 3;
inline int AlgMultiTestInfo::mapparams_size() const {
  return mapparams_.size();
}
inline void AlgMultiTestInfo::clear_mapparams() {
  mapparams_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AlgMultiTestInfo::mapparams() const {
  // @@protoc_insertion_point(field_map:so_rtrs.AlgMultiTestInfo.mapParams)
  return mapparams_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AlgMultiTestInfo::mutable_mapparams() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.AlgMultiTestInfo.mapParams)
  return mapparams_.MutableMap();
}

// uint32 expLayer = 4;
inline void AlgMultiTestInfo::clear_explayer() {
  explayer_ = 0u;
}
inline ::google::protobuf::uint32 AlgMultiTestInfo::explayer() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AlgMultiTestInfo.expLayer)
  return explayer_;
}
inline void AlgMultiTestInfo::set_explayer(::google::protobuf::uint32 value) {
  
  explayer_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AlgMultiTestInfo.expLayer)
}

// string expName = 5;
inline void AlgMultiTestInfo::clear_expname() {
  expname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AlgMultiTestInfo::expname() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AlgMultiTestInfo.expName)
  return expname_.GetNoArena();
}
inline void AlgMultiTestInfo::set_expname(const ::std::string& value) {
  
  expname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AlgMultiTestInfo.expName)
}
#if LANG_CXX11
inline void AlgMultiTestInfo::set_expname(::std::string&& value) {
  
  expname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AlgMultiTestInfo.expName)
}
#endif
inline void AlgMultiTestInfo::set_expname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AlgMultiTestInfo.expName)
}
inline void AlgMultiTestInfo::set_expname(const char* value, size_t size) {
  
  expname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AlgMultiTestInfo.expName)
}
inline ::std::string* AlgMultiTestInfo::mutable_expname() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AlgMultiTestInfo.expName)
  return expname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AlgMultiTestInfo::release_expname() {
  // @@protoc_insertion_point(field_release:so_rtrs.AlgMultiTestInfo.expName)
  
  return expname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AlgMultiTestInfo::set_allocated_expname(::std::string* expname) {
  if (expname != NULL) {
    
  } else {
    
  }
  expname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expname);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AlgMultiTestInfo.expName)
}

// uint64 pageid = 6;
inline void AlgMultiTestInfo::clear_pageid() {
  pageid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AlgMultiTestInfo::pageid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AlgMultiTestInfo.pageid)
  return pageid_;
}
inline void AlgMultiTestInfo::set_pageid(::google::protobuf::uint64 value) {
  
  pageid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AlgMultiTestInfo.pageid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace so_rtrs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtrs_5fexpinfo_2eproto
