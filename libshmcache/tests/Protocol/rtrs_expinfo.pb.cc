// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtrs_expinfo.proto

#include "rtrs_expinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rtrs_5fexpinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtrs_5fexpinfo_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AlgMultiTestInfo_MapParamsEntry_DoNotUse;
}  // namespace protobuf_rtrs_5fexpinfo_2eproto
namespace so_rtrs {
class AlgMultiTestInfo_MapParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgMultiTestInfo_MapParamsEntry_DoNotUse>
      _instance;
} _AlgMultiTestInfo_MapParamsEntry_DoNotUse_default_instance_;
class AlgMultiTestInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AlgMultiTestInfo>
      _instance;
} _AlgMultiTestInfo_default_instance_;
}  // namespace so_rtrs
namespace protobuf_rtrs_5fexpinfo_2eproto {
static void InitDefaultsAlgMultiTestInfo_MapParamsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::so_rtrs::_AlgMultiTestInfo_MapParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse();
  }
  ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AlgMultiTestInfo_MapParamsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAlgMultiTestInfo_MapParamsEntry_DoNotUse}, {}};

static void InitDefaultsAlgMultiTestInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::so_rtrs::_AlgMultiTestInfo_default_instance_;
    new (ptr) ::so_rtrs::AlgMultiTestInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::so_rtrs::AlgMultiTestInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AlgMultiTestInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAlgMultiTestInfo}, {
      &protobuf_rtrs_5fexpinfo_2eproto::scc_info_AlgMultiTestInfo_MapParamsEntry_DoNotUse.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AlgMultiTestInfo_MapParamsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AlgMultiTestInfo.base);
}

}  // namespace protobuf_rtrs_5fexpinfo_2eproto
namespace so_rtrs {

// ===================================================================

AlgMultiTestInfo_MapParamsEntry_DoNotUse::AlgMultiTestInfo_MapParamsEntry_DoNotUse() {}
AlgMultiTestInfo_MapParamsEntry_DoNotUse::AlgMultiTestInfo_MapParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void AlgMultiTestInfo_MapParamsEntry_DoNotUse::MergeFrom(const AlgMultiTestInfo_MapParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

void AlgMultiTestInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AlgMultiTestInfo::kTestIDFieldNumber;
const int AlgMultiTestInfo::kRuleIDFieldNumber;
const int AlgMultiTestInfo::kMapParamsFieldNumber;
const int AlgMultiTestInfo::kExpLayerFieldNumber;
const int AlgMultiTestInfo::kExpNameFieldNumber;
const int AlgMultiTestInfo::kPageidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AlgMultiTestInfo::AlgMultiTestInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtrs_5fexpinfo_2eproto::scc_info_AlgMultiTestInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:so_rtrs.AlgMultiTestInfo)
}
AlgMultiTestInfo::AlgMultiTestInfo(const AlgMultiTestInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapparams_.MergeFrom(from.mapparams_);
  expname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.expname().size() > 0) {
    expname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expname_);
  }
  ::memcpy(&testid_, &from.testid_,
    static_cast<size_t>(reinterpret_cast<char*>(&explayer_) -
    reinterpret_cast<char*>(&testid_)) + sizeof(explayer_));
  // @@protoc_insertion_point(copy_constructor:so_rtrs.AlgMultiTestInfo)
}

void AlgMultiTestInfo::SharedCtor() {
  expname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&testid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explayer_) -
      reinterpret_cast<char*>(&testid_)) + sizeof(explayer_));
}

AlgMultiTestInfo::~AlgMultiTestInfo() {
  // @@protoc_insertion_point(destructor:so_rtrs.AlgMultiTestInfo)
  SharedDtor();
}

void AlgMultiTestInfo::SharedDtor() {
  expname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AlgMultiTestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlgMultiTestInfo& AlgMultiTestInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtrs_5fexpinfo_2eproto::scc_info_AlgMultiTestInfo.base);
  return *internal_default_instance();
}


void AlgMultiTestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:so_rtrs.AlgMultiTestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapparams_.Clear();
  expname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&testid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&explayer_) -
      reinterpret_cast<char*>(&testid_)) + sizeof(explayer_));
  _internal_metadata_.Clear();
}

bool AlgMultiTestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:so_rtrs.AlgMultiTestInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 testID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &testid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ruleID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ruleid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> mapParams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          AlgMultiTestInfo_MapParamsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapFieldLite<
              AlgMultiTestInfo_MapParamsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&mapparams_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AlgMultiTestInfo.MapParamsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AlgMultiTestInfo.MapParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 expLayer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &explayer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string expName = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->expname().data(), static_cast<int>(this->expname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AlgMultiTestInfo.expName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 pageid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pageid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:so_rtrs.AlgMultiTestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:so_rtrs.AlgMultiTestInfo)
  return false;
#undef DO_
}

void AlgMultiTestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:so_rtrs.AlgMultiTestInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 testID = 1;
  if (this->testid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->testid(), output);
  }

  // int32 ruleID = 2;
  if (this->ruleid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ruleid(), output);
  }

  // map<string, string> mapParams = 3;
  if (!this->mapparams().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "so_rtrs.AlgMultiTestInfo.MapParamsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "so_rtrs.AlgMultiTestInfo.MapParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->mapparams().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->mapparams().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapparams().begin();
          it != this->mapparams().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<AlgMultiTestInfo_MapParamsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(mapparams_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<AlgMultiTestInfo_MapParamsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->mapparams().begin();
          it != this->mapparams().end(); ++it) {
        entry.reset(mapparams_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // uint32 expLayer = 4;
  if (this->explayer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->explayer(), output);
  }

  // string expName = 5;
  if (this->expname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->expname().data(), static_cast<int>(this->expname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "so_rtrs.AlgMultiTestInfo.expName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->expname(), output);
  }

  // uint64 pageid = 6;
  if (this->pageid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->pageid(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:so_rtrs.AlgMultiTestInfo)
}

size_t AlgMultiTestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:so_rtrs.AlgMultiTestInfo)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // map<string, string> mapParams = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapparams_size());
  {
    ::std::unique_ptr<AlgMultiTestInfo_MapParamsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->mapparams().begin();
        it != this->mapparams().end(); ++it) {
      entry.reset(mapparams_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string expName = 5;
  if (this->expname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->expname());
  }

  // int32 testID = 1;
  if (this->testid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->testid());
  }

  // int32 ruleID = 2;
  if (this->ruleid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ruleid());
  }

  // uint64 pageid = 6;
  if (this->pageid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pageid());
  }

  // uint32 expLayer = 4;
  if (this->explayer() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->explayer());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlgMultiTestInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlgMultiTestInfo*>(&from));
}

void AlgMultiTestInfo::MergeFrom(const AlgMultiTestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:so_rtrs.AlgMultiTestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapparams_.MergeFrom(from.mapparams_);
  if (from.expname().size() > 0) {

    expname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.expname_);
  }
  if (from.testid() != 0) {
    set_testid(from.testid());
  }
  if (from.ruleid() != 0) {
    set_ruleid(from.ruleid());
  }
  if (from.pageid() != 0) {
    set_pageid(from.pageid());
  }
  if (from.explayer() != 0) {
    set_explayer(from.explayer());
  }
}

void AlgMultiTestInfo::CopyFrom(const AlgMultiTestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:so_rtrs.AlgMultiTestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgMultiTestInfo::IsInitialized() const {
  return true;
}

void AlgMultiTestInfo::Swap(AlgMultiTestInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgMultiTestInfo::InternalSwap(AlgMultiTestInfo* other) {
  using std::swap;
  mapparams_.Swap(&other->mapparams_);
  expname_.Swap(&other->expname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(testid_, other->testid_);
  swap(ruleid_, other->ruleid_);
  swap(pageid_, other->pageid_);
  swap(explayer_, other->explayer_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AlgMultiTestInfo::GetTypeName() const {
  return "so_rtrs.AlgMultiTestInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace so_rtrs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::so_rtrs::AlgMultiTestInfo_MapParamsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::so_rtrs::AlgMultiTestInfo* Arena::CreateMaybeMessage< ::so_rtrs::AlgMultiTestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::so_rtrs::AlgMultiTestInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
