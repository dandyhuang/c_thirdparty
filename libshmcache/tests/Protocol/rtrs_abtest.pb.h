// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtrs_abtest.proto

#ifndef PROTOBUF_INCLUDED_rtrs_5fabtest_2eproto
#define PROTOBUF_INCLUDED_rtrs_5fabtest_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "rtrs_expinfo.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_rtrs_5fabtest_2eproto 

namespace protobuf_rtrs_5fabtest_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_rtrs_5fabtest_2eproto
namespace so_rtrs {
class AbtestReq;
class AbtestReqDefaultTypeInternal;
extern AbtestReqDefaultTypeInternal _AbtestReq_default_instance_;
class AbtestRsp;
class AbtestRspDefaultTypeInternal;
extern AbtestRspDefaultTypeInternal _AbtestRsp_default_instance_;
}  // namespace so_rtrs
namespace google {
namespace protobuf {
template<> ::so_rtrs::AbtestReq* Arena::CreateMaybeMessage<::so_rtrs::AbtestReq>(Arena*);
template<> ::so_rtrs::AbtestRsp* Arena::CreateMaybeMessage<::so_rtrs::AbtestRsp>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace so_rtrs {

// ===================================================================

class AbtestReq : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AbtestReq) */ {
 public:
  AbtestReq();
  virtual ~AbtestReq();

  AbtestReq(const AbtestReq& from);

  inline AbtestReq& operator=(const AbtestReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbtestReq(AbtestReq&& from) noexcept
    : AbtestReq() {
    *this = ::std::move(from);
  }

  inline AbtestReq& operator=(AbtestReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AbtestReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbtestReq* internal_default_instance() {
    return reinterpret_cast<const AbtestReq*>(
               &_AbtestReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AbtestReq* other);
  friend void swap(AbtestReq& a, AbtestReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbtestReq* New() const final {
    return CreateMaybeMessage<AbtestReq>(NULL);
  }

  AbtestReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbtestReq>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AbtestReq& from);
  void MergeFrom(const AbtestReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbtestReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userid = 2;
  void clear_userid();
  static const int kUseridFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string hashid = 3;
  void clear_hashid();
  static const int kHashidFieldNumber = 3;
  const ::std::string& hashid() const;
  void set_hashid(const ::std::string& value);
  #if LANG_CXX11
  void set_hashid(::std::string&& value);
  #endif
  void set_hashid(const char* value);
  void set_hashid(const char* value, size_t size);
  ::std::string* mutable_hashid();
  ::std::string* release_hashid();
  void set_allocated_hashid(::std::string* hashid);

  // string page_recognize = 4;
  void clear_page_recognize();
  static const int kPageRecognizeFieldNumber = 4;
  const ::std::string& page_recognize() const;
  void set_page_recognize(const ::std::string& value);
  #if LANG_CXX11
  void set_page_recognize(::std::string&& value);
  #endif
  void set_page_recognize(const char* value);
  void set_page_recognize(const char* value, size_t size);
  ::std::string* mutable_page_recognize();
  ::std::string* release_page_recognize();
  void set_allocated_page_recognize(::std::string* page_recognize);

  // uint64 sceneid = 1;
  void clear_sceneid();
  static const int kSceneidFieldNumber = 1;
  ::google::protobuf::uint64 sceneid() const;
  void set_sceneid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.AbtestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr hashid_;
  ::google::protobuf::internal::ArenaStringPtr page_recognize_;
  ::google::protobuf::uint64 sceneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtrs_5fabtest_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AbtestRsp : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AbtestRsp) */ {
 public:
  AbtestRsp();
  virtual ~AbtestRsp();

  AbtestRsp(const AbtestRsp& from);

  inline AbtestRsp& operator=(const AbtestRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AbtestRsp(AbtestRsp&& from) noexcept
    : AbtestRsp() {
    *this = ::std::move(from);
  }

  inline AbtestRsp& operator=(AbtestRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AbtestRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbtestRsp* internal_default_instance() {
    return reinterpret_cast<const AbtestRsp*>(
               &_AbtestRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AbtestRsp* other);
  friend void swap(AbtestRsp& a, AbtestRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AbtestRsp* New() const final {
    return CreateMaybeMessage<AbtestRsp>(NULL);
  }

  AbtestRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AbtestRsp>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AbtestRsp& from);
  void MergeFrom(const AbtestRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbtestRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .so_rtrs.AlgMultiTestInfo page_items = 1;
  int page_items_size() const;
  void clear_page_items();
  static const int kPageItemsFieldNumber = 1;
  ::so_rtrs::AlgMultiTestInfo* mutable_page_items(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
      mutable_page_items();
  const ::so_rtrs::AlgMultiTestInfo& page_items(int index) const;
  ::so_rtrs::AlgMultiTestInfo* add_page_items();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
      page_items() const;

  // string debug_error = 2;
  void clear_debug_error();
  static const int kDebugErrorFieldNumber = 2;
  const ::std::string& debug_error() const;
  void set_debug_error(const ::std::string& value);
  #if LANG_CXX11
  void set_debug_error(::std::string&& value);
  #endif
  void set_debug_error(const char* value);
  void set_debug_error(const char* value, size_t size);
  ::std::string* mutable_debug_error();
  ::std::string* release_debug_error();
  void set_allocated_debug_error(::std::string* debug_error);

  // @@protoc_insertion_point(class_scope:so_rtrs.AbtestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo > page_items_;
  ::google::protobuf::internal::ArenaStringPtr debug_error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_rtrs_5fabtest_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AbtestReq

// uint64 sceneid = 1;
inline void AbtestReq::clear_sceneid() {
  sceneid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AbtestReq::sceneid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestReq.sceneid)
  return sceneid_;
}
inline void AbtestReq::set_sceneid(::google::protobuf::uint64 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AbtestReq.sceneid)
}

// string userid = 2;
inline void AbtestReq::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbtestReq::userid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestReq.userid)
  return userid_.GetNoArena();
}
inline void AbtestReq::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AbtestReq.userid)
}
#if LANG_CXX11
inline void AbtestReq::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AbtestReq.userid)
}
#endif
inline void AbtestReq::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AbtestReq.userid)
}
inline void AbtestReq::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AbtestReq.userid)
}
inline ::std::string* AbtestReq::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AbtestReq.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbtestReq::release_userid() {
  // @@protoc_insertion_point(field_release:so_rtrs.AbtestReq.userid)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbtestReq::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AbtestReq.userid)
}

// string hashid = 3;
inline void AbtestReq::clear_hashid() {
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbtestReq::hashid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestReq.hashid)
  return hashid_.GetNoArena();
}
inline void AbtestReq::set_hashid(const ::std::string& value) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AbtestReq.hashid)
}
#if LANG_CXX11
inline void AbtestReq::set_hashid(::std::string&& value) {
  
  hashid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AbtestReq.hashid)
}
#endif
inline void AbtestReq::set_hashid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AbtestReq.hashid)
}
inline void AbtestReq::set_hashid(const char* value, size_t size) {
  
  hashid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AbtestReq.hashid)
}
inline ::std::string* AbtestReq::mutable_hashid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AbtestReq.hashid)
  return hashid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbtestReq::release_hashid() {
  // @@protoc_insertion_point(field_release:so_rtrs.AbtestReq.hashid)
  
  return hashid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbtestReq::set_allocated_hashid(::std::string* hashid) {
  if (hashid != NULL) {
    
  } else {
    
  }
  hashid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hashid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AbtestReq.hashid)
}

// string page_recognize = 4;
inline void AbtestReq::clear_page_recognize() {
  page_recognize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbtestReq::page_recognize() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestReq.page_recognize)
  return page_recognize_.GetNoArena();
}
inline void AbtestReq::set_page_recognize(const ::std::string& value) {
  
  page_recognize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AbtestReq.page_recognize)
}
#if LANG_CXX11
inline void AbtestReq::set_page_recognize(::std::string&& value) {
  
  page_recognize_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AbtestReq.page_recognize)
}
#endif
inline void AbtestReq::set_page_recognize(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_recognize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AbtestReq.page_recognize)
}
inline void AbtestReq::set_page_recognize(const char* value, size_t size) {
  
  page_recognize_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AbtestReq.page_recognize)
}
inline ::std::string* AbtestReq::mutable_page_recognize() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AbtestReq.page_recognize)
  return page_recognize_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbtestReq::release_page_recognize() {
  // @@protoc_insertion_point(field_release:so_rtrs.AbtestReq.page_recognize)
  
  return page_recognize_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbtestReq::set_allocated_page_recognize(::std::string* page_recognize) {
  if (page_recognize != NULL) {
    
  } else {
    
  }
  page_recognize_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_recognize);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AbtestReq.page_recognize)
}

// -------------------------------------------------------------------

// AbtestRsp

// repeated .so_rtrs.AlgMultiTestInfo page_items = 1;
inline int AbtestRsp::page_items_size() const {
  return page_items_.size();
}
inline ::so_rtrs::AlgMultiTestInfo* AbtestRsp::mutable_page_items(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.AbtestRsp.page_items)
  return page_items_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
AbtestRsp::mutable_page_items() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.AbtestRsp.page_items)
  return &page_items_;
}
inline const ::so_rtrs::AlgMultiTestInfo& AbtestRsp::page_items(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestRsp.page_items)
  return page_items_.Get(index);
}
inline ::so_rtrs::AlgMultiTestInfo* AbtestRsp::add_page_items() {
  // @@protoc_insertion_point(field_add:so_rtrs.AbtestRsp.page_items)
  return page_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
AbtestRsp::page_items() const {
  // @@protoc_insertion_point(field_list:so_rtrs.AbtestRsp.page_items)
  return page_items_;
}

// string debug_error = 2;
inline void AbtestRsp::clear_debug_error() {
  debug_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AbtestRsp::debug_error() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AbtestRsp.debug_error)
  return debug_error_.GetNoArena();
}
inline void AbtestRsp::set_debug_error(const ::std::string& value) {
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AbtestRsp.debug_error)
}
#if LANG_CXX11
inline void AbtestRsp::set_debug_error(::std::string&& value) {
  
  debug_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AbtestRsp.debug_error)
}
#endif
inline void AbtestRsp::set_debug_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AbtestRsp.debug_error)
}
inline void AbtestRsp::set_debug_error(const char* value, size_t size) {
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AbtestRsp.debug_error)
}
inline ::std::string* AbtestRsp::mutable_debug_error() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AbtestRsp.debug_error)
  return debug_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbtestRsp::release_debug_error() {
  // @@protoc_insertion_point(field_release:so_rtrs.AbtestRsp.debug_error)
  
  return debug_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbtestRsp::set_allocated_debug_error(::std::string* debug_error) {
  if (debug_error != NULL) {
    
  } else {
    
  }
  debug_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_error);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AbtestRsp.debug_error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace so_rtrs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_rtrs_5fabtest_2eproto
