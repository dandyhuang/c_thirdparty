// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recommend.proto

#ifndef PROTOBUF_INCLUDED_recommend_2eproto
#define PROTOBUF_INCLUDED_recommend_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "rtrs_expinfo.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_recommend_2eproto 

namespace protobuf_recommend_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_recommend_2eproto
namespace so_rtrs {
class AdItemInfo;
class AdItemInfoDefaultTypeInternal;
extern AdItemInfoDefaultTypeInternal _AdItemInfo_default_instance_;
class AdItemInfo_IdeaMapEntry_DoNotUse;
class AdItemInfo_IdeaMapEntry_DoNotUseDefaultTypeInternal;
extern AdItemInfo_IdeaMapEntry_DoNotUseDefaultTypeInternal _AdItemInfo_IdeaMapEntry_DoNotUse_default_instance_;
class AgeSexInfo;
class AgeSexInfoDefaultTypeInternal;
extern AgeSexInfoDefaultTypeInternal _AgeSexInfo_default_instance_;
class AllTestInfo;
class AllTestInfoDefaultTypeInternal;
extern AllTestInfoDefaultTypeInternal _AllTestInfo_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class IncomeCityInfo;
class IncomeCityInfoDefaultTypeInternal;
extern IncomeCityInfoDefaultTypeInternal _IncomeCityInfo_default_instance_;
class Interval;
class IntervalDefaultTypeInternal;
extern IntervalDefaultTypeInternal _Interval_default_instance_;
class LocationInfo;
class LocationInfoDefaultTypeInternal;
extern LocationInfoDefaultTypeInternal _LocationInfo_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class PredictorInfo;
class PredictorInfoDefaultTypeInternal;
extern PredictorInfoDefaultTypeInternal _PredictorInfo_default_instance_;
class RecomRequest;
class RecomRequestDefaultTypeInternal;
extern RecomRequestDefaultTypeInternal _RecomRequest_default_instance_;
class RecomRequest_SceneInsulateContextEntry_DoNotUse;
class RecomRequest_SceneInsulateContextEntry_DoNotUseDefaultTypeInternal;
extern RecomRequest_SceneInsulateContextEntry_DoNotUseDefaultTypeInternal _RecomRequest_SceneInsulateContextEntry_DoNotUse_default_instance_;
class RecomResponse;
class RecomResponseDefaultTypeInternal;
extern RecomResponseDefaultTypeInternal _RecomResponse_default_instance_;
class RecomResponse_DebugInfo2Entry_DoNotUse;
class RecomResponse_DebugInfo2Entry_DoNotUseDefaultTypeInternal;
extern RecomResponse_DebugInfo2Entry_DoNotUseDefaultTypeInternal _RecomResponse_DebugInfo2Entry_DoNotUse_default_instance_;
class RecomResponse_DebugInfoEntry_DoNotUse;
class RecomResponse_DebugInfoEntry_DoNotUseDefaultTypeInternal;
extern RecomResponse_DebugInfoEntry_DoNotUseDefaultTypeInternal _RecomResponse_DebugInfoEntry_DoNotUse_default_instance_;
class RecommendInfo;
class RecommendInfoDefaultTypeInternal;
extern RecommendInfoDefaultTypeInternal _RecommendInfo_default_instance_;
class RecommendInfo_MapContextEntry_DoNotUse;
class RecommendInfo_MapContextEntry_DoNotUseDefaultTypeInternal;
extern RecommendInfo_MapContextEntry_DoNotUseDefaultTypeInternal _RecommendInfo_MapContextEntry_DoNotUse_default_instance_;
class RecommendInfo_MapItemEntry_DoNotUse;
class RecommendInfo_MapItemEntry_DoNotUseDefaultTypeInternal;
extern RecommendInfo_MapItemEntry_DoNotUseDefaultTypeInternal _RecommendInfo_MapItemEntry_DoNotUse_default_instance_;
class RecommendItem;
class RecommendItemDefaultTypeInternal;
extern RecommendItemDefaultTypeInternal _RecommendItem_default_instance_;
class RecommendItem_MapContextEntry_DoNotUse;
class RecommendItem_MapContextEntry_DoNotUseDefaultTypeInternal;
extern RecommendItem_MapContextEntry_DoNotUseDefaultTypeInternal _RecommendItem_MapContextEntry_DoNotUse_default_instance_;
class RuleAppDirectInfo;
class RuleAppDirectInfoDefaultTypeInternal;
extern RuleAppDirectInfoDefaultTypeInternal _RuleAppDirectInfo_default_instance_;
class RuleAppDirectInfo_MapTagInfoEntry_DoNotUse;
class RuleAppDirectInfo_MapTagInfoEntry_DoNotUseDefaultTypeInternal;
extern RuleAppDirectInfo_MapTagInfoEntry_DoNotUseDefaultTypeInternal _RuleAppDirectInfo_MapTagInfoEntry_DoNotUse_default_instance_;
class SceneSubAlgInfo;
class SceneSubAlgInfoDefaultTypeInternal;
extern SceneSubAlgInfoDefaultTypeInternal _SceneSubAlgInfo_default_instance_;
class SeviceSceneInsulateInfo;
class SeviceSceneInsulateInfoDefaultTypeInternal;
extern SeviceSceneInsulateInfoDefaultTypeInternal _SeviceSceneInsulateInfo_default_instance_;
}  // namespace so_rtrs
namespace google {
namespace protobuf {
template<> ::so_rtrs::AdItemInfo* Arena::CreateMaybeMessage<::so_rtrs::AdItemInfo>(Arena*);
template<> ::so_rtrs::AdItemInfo_IdeaMapEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::AdItemInfo_IdeaMapEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::AgeSexInfo* Arena::CreateMaybeMessage<::so_rtrs::AgeSexInfo>(Arena*);
template<> ::so_rtrs::AllTestInfo* Arena::CreateMaybeMessage<::so_rtrs::AllTestInfo>(Arena*);
template<> ::so_rtrs::DeviceInfo* Arena::CreateMaybeMessage<::so_rtrs::DeviceInfo>(Arena*);
template<> ::so_rtrs::IncomeCityInfo* Arena::CreateMaybeMessage<::so_rtrs::IncomeCityInfo>(Arena*);
template<> ::so_rtrs::Interval* Arena::CreateMaybeMessage<::so_rtrs::Interval>(Arena*);
template<> ::so_rtrs::LocationInfo* Arena::CreateMaybeMessage<::so_rtrs::LocationInfo>(Arena*);
template<> ::so_rtrs::NetworkInfo* Arena::CreateMaybeMessage<::so_rtrs::NetworkInfo>(Arena*);
template<> ::so_rtrs::PredictorInfo* Arena::CreateMaybeMessage<::so_rtrs::PredictorInfo>(Arena*);
template<> ::so_rtrs::RecomRequest* Arena::CreateMaybeMessage<::so_rtrs::RecomRequest>(Arena*);
template<> ::so_rtrs::RecomRequest_SceneInsulateContextEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecomRequest_SceneInsulateContextEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::RecomResponse* Arena::CreateMaybeMessage<::so_rtrs::RecomResponse>(Arena*);
template<> ::so_rtrs::RecomResponse_DebugInfo2Entry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecomResponse_DebugInfo2Entry_DoNotUse>(Arena*);
template<> ::so_rtrs::RecomResponse_DebugInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecomResponse_DebugInfoEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::RecommendInfo* Arena::CreateMaybeMessage<::so_rtrs::RecommendInfo>(Arena*);
template<> ::so_rtrs::RecommendInfo_MapContextEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecommendInfo_MapContextEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::RecommendInfo_MapItemEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecommendInfo_MapItemEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::RecommendItem* Arena::CreateMaybeMessage<::so_rtrs::RecommendItem>(Arena*);
template<> ::so_rtrs::RecommendItem_MapContextEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RecommendItem_MapContextEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::RuleAppDirectInfo* Arena::CreateMaybeMessage<::so_rtrs::RuleAppDirectInfo>(Arena*);
template<> ::so_rtrs::RuleAppDirectInfo_MapTagInfoEntry_DoNotUse* Arena::CreateMaybeMessage<::so_rtrs::RuleAppDirectInfo_MapTagInfoEntry_DoNotUse>(Arena*);
template<> ::so_rtrs::SceneSubAlgInfo* Arena::CreateMaybeMessage<::so_rtrs::SceneSubAlgInfo>(Arena*);
template<> ::so_rtrs::SeviceSceneInsulateInfo* Arena::CreateMaybeMessage<::so_rtrs::SeviceSceneInsulateInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace so_rtrs {

enum SCENE_CMD_ID {
  UNKNOWN = 0,
  SCENE_CMD_ID_INFORMATION_FLOW = 1,
  SCENE_CMD_ID_DOWNLOAD_RECOM = 2,
  SCENE_CMD_ID_APPSTORE_SEARCH_ASSOCIATE = 3,
  SCENE_CMD_ID_APPSTORE_SEARCH_CPD_LIST = 4,
  SCENE_CMD_ID_BROWSER_SEARCH = 5,
  SCENE_CMD_ID_APPSTORE_DOWNLOAD_BEROFE_AFTER = 6,
  SCENE_CMD_ID_BROWSER_SITE = 7,
  SCENE_CMD_ID_APPSTORE_HOME_RECOMM = 12,
  SCENE_CMD_ID_APPSTORE_UPDATE_PAGE_RECOMM = 13,
  SCENE_CMD_ID_THEME_ENTRANCE_RECOMMEND = 19,
  SCENE_CMD_ID_GAMECENTER_CONTENT_DETAIL_RECOMM = 28,
  SCENE_CMD_ID_ITHEME_THEME_LIST_PAGE_RECOMM = 50,
  SCENE_CMD_ID_ITHEME_FONT_LIST_PAGE_RECOMM = 51,
  SCENE_CMD_ID_ITHEME_THEME_COLUMN_RECOMM = 52,
  SCENE_CMD_ID_SYSTEM_SETTING_THEME_RECOMM = 53,
  SCENE_CMD_ID_ITHEME_DETAIL_PAGE_DOWNLOAD_AFTER = 54,
  SCENE_CMD_ID_ITHEME_FONT_COLUMN_RECOMM = 55,
  SCENE_CMD_ID_ITHEME_SEARCH_NO_RESULT = 56,
  SCENE_CMD_ID_MINUS_ONE_THEME_RECOMM = 57,
  SCENE_CMD_ID_ITHEME_THEME_COLUMN_MORE_RECOMM = 58,
  SCENE_CMD_ID_ITHEME_WALLPAPER_LIST_PAGE_RECOMM = 59,
  SCENE_CMD_ID_ITHEME_UNLOCK_LIST_PAGE_RECOMM = 60,
  SCENE_CMD_ID_ITHEME_UNLOCK_COLUMN_RECOMM = 61,
  SCENE_CMD_ID_ITHEME_ALLSCENE_BANNER_RECOMM = 62,
  SCENE_CMD_ID_APPSTORE_SEARCH_RECOMM_LIST = 102,
  SCENE_CMD_ID_APPSTORE_RECOMM_DOWNLOAD = 104,
  SCENE_CMD_ID_APPSTORE_CPD_DOWNLOAD = 105,
  SCENE_CMD_ID_APPSTORE_LIST_GAME_SEARCH = 106,
  SCENE_CMD_ID_APPSTORE_ASSOCIATE_GAME_SEARCH = 107,
  SCENE_CMD_ID_APPSTORE_SEARCH_BROADCAST_WORD = 108,
  SCENE_CMD_ID_APPSTORE_APP_SEARCH_HOT_WORD = 109,
  SCENE_CMD_ID_APPSTORE_GAME_SEARCH_HOT_WORD = 110,
  SCENE_CMD_ID_APPSTORE_DETAIL_BEFOR_DOWNLOAD = 111,
  SCENE_CMD_ID_APPSTORE_DETAIL_AFTER_DOWNLOAD = 112,
  SCENE_CMD_ID_APPSTORE_FULL_SCENE = 113,
  SCENE_CMD_ID_APPSTORE_CPD_AFTER_DOWNLOAD = 114,
  SCENE_CMD_ID_APPSTORE_CPD_LIST_GAME_SEARCH = 115,
  SCENE_CMD_ID_APPSTORE_CPD_ASSOCIATE_GAME_SEARCH = 116,
  SCENE_CMD_ID_APPSTORE_SEARCH_LIST_CPD_SEARCH = 117,
  SCENE_CMD_ID_APPSTORE_DOWNLOAD_AFTER = 118,
  SCENE_CMD_ID_APPSTORE_LY_LIST_GAME_SEARCH = 119,
  SCENE_CMD_ID_APPSTORE_LY_ASSOCIATE_GAME_SEARCH = 120,
  SCENE_CMD_ID_APPSTORE_UPDATE_PAGE = 121,
  SCENE_CMD_ID_APPSTORE_AFTER_UPDATE = 122,
  SCENE_CMD_ID_APPSTORE_NECESS_INSTALL = 123,
  SCENE_CMD_ID_APPSTORE_DOWNLOAD_MANAGE = 124,
  SCENE_CMD_ID_APPSTORE_SEARCH_ACTIVE = 125,
  SCENE_CMD_ID_APPSOTRE_SEARCH_NO_RESULT_RECOMM = 126,
  SCENE_CMD_ID_APPSTORE_APP_TAG = 127,
  SCENE_CMD_ID_APPSOTRE_TAG_APPLIST = 128,
  SCENE_CMD_ID_APPSTORE_UPDATE_PUSH = 129,
  SCENE_CMD_ID_APPSTORE_HOME_RECOMM_NON_COMMERCE = 130,
  SCENE_CMD_ID_APPSTORE_DOWNLOAD_BEROFE_MULTI_MODULE = 131,
  SCENE_CMD_ID_H5_HOMEPAGE_RECOMM = 200,
  SCENE_CMD_ID_H5_SPECIALPAGE_RECOMM = 201,
  SCENE_CMD_ID_H5_HOT_SEARCH_INSTALLATION = 202,
  SCENE_CMD_ID_H5_SEARCH_RESULT_PAGE = 203,
  SCENE_CMD_ID_H5_ASSOCIATIVE_WORD_SEARCH = 204,
  SCENE_CMD_ID_H5_SEARCH_HOT_WORDS = 205,
  SCENE_CMD_ID_H5_DETAILS_PAGE_BEFORE_DOWNLOAD_RECOMM = 206,
  SCENE_CMD_ID_H5_DETAILS_PAGE_AFTER_DOWNLOAD_RECOMM = 207,
  SCENE_CMD_ID_IMUSIC_PLAYLIST_CHANGE = 301,
  SCENE_CMD_ID_IMUSIC_PLAYLIST_RECOMM = 302,
  SCENE_CMD_ID_IMUSIC_EVERYSONG_RECOMM = 303,
  SCENE_CMD_ID_IMUSIC_FMFIRST_RECOMM = 304,
  SCENE_CMD_ID_IMUSIC_FMSECOND_RECOMM = 305,
  SCENE_CMD_ID_IMUSIC_FMONLINE_RECOMM = 306,
  SCENE_CMD_ID_IMUSIC_EXCLUSIVE_RECOMM = 307,
  SCENE_CMD_ID_IMUSIC_EXCLUSIVE_CHANGE = 308,
  SCENE_CMD_ID_IMUSIC_FMCOLUMN_RECOMM = 309,
  SCENE_CMD_ID_IMUSIC_SONG_SEARCHWORD_RECOMM = 310,
  SCENE_CMD_ID_GAMECENTER_LIST_SEARCH = 351,
  SCENE_CMD_ID_GAMECENTER_ASSOCIATE_SEARCH = 352,
  SCENE_CMD_ID_GAMECENTER_FORUM_HOME_RECOMM = 353,
  SCENE_CMD_ID_GAMECENTER_CPD_LIST_SEARCH = 354,
  SCENE_CMD_ID_GAMECENTER_CPD_ASSOCIATE_SEARCH = 355,
  SCENE_CMD_ID_GAMECENTER_CTR_PREDICT = 356,
  SCENE_CMD_ID_GAMECENTER_LY_LIST_SEARCH = 357,
  SCENE_CMD_ID_GAMECENTER_LY_ASSOCIATE_SEARCH = 358,
  SCENE_CMD_ID_GAMECENTER_RECOMMEND = 359,
  SCENE_CMD_ID_GAMECENTER_SEARCH_RECOM = 360,
  SCENE_CMD_ID_GAMECENTER_SEARCH_LIST = 361,
  SCENE_CMD_ID_GAMECENTER_GAME_DIV = 362,
  SCENE_CMD_ID_GAMECENTER_NETGAME_DIV = 363,
  SCENE_CMD_ID_GAMECENTER_TOP_HOT = 364,
  SCENE_CMD_ID_GAMECENTER_TOP_GAME = 365,
  SCENE_CMD_ID_GAMECENTER_TOP_NETGAME = 366,
  SCENE_CMD_ID_GAMECENTER_TOP_NEWGAME = 367,
  SCENE_CMD_ID_GAMECENTER_GAME_DETAIL = 368,
  SCENE_CMD_ID_GAMECENTER_CATEGORY = 369,
  SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_OUT = 370,
  SCENE_CMD_ID_GAMECENTER_RECOMMEND_DAY_LIST = 371,
  SCENE_CMD_ID_GAMECENTER_HOT_DIALOG_APP = 372,
  SCENE_CMD_ID_GAMECENTER_DOWNLOAD_MANAGEMENT_REC = 373,
  SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_OUT = 374,
  SCENE_CMD_ID_GAMECENTER_TOP_SEARCH_LIST = 375,
  SCENE_CMD_ID_GAMECENTER_DOWNLOAD_AFTER = 376,
  SCENE_CMD_ID_GAMECENTER_GAME_BBS = 377,
  SCENE_CMD_ID_LOCKSCREEN_JOYPICTURE_RECOMM = 400,
  SCENE_CMD_ID_QUICK_APP_SEARCH_PAGE_SEARCH = 410,
  SCENE_CMD_ID_QUICK_APP_SECOND_LIST_RECOMM = 411,
  SCENE_CMD_ID_QUICK_APP_HOMEPAGE_RECOMM = 412,
  SCENE_CMD_ID_FAST_APP_SEARCH_BOX_GUESS_LIKE_RECOMM = 413,
  SCENE_CMD_ID_FAST_APP_SEARCH_BOX_HOT_WORD_RECOMM = 414,
  SCENE_CMD_ID_FAST_APP_HIBOARD_PERSONAL_RECOMM = 415,
  SCENE_CMD_ID_ALLIANCE_AD_CPC = 450,
  SCENE_CMD_ID_AD_ALLIANCE_CPD = 451,
  SCENE_CMD_ID_INFO_FLOW_OCPC = 452,
  SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DETAIL_LIST = 501,
  SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_UPDATE_LIST = 502,
  SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_DOWNLOAD_MANAGER = 503,
  SCENE_CMD_ID_FOREIGN_APPSTORE_RECOMM_INSTALL_RECOMM = 504,
  SCENE_CMD_ID_FOREIGN_APPSTORE_CLASSIFY_LIST = 505,
  SCENE_CMD_ID_FOREIGN_APPSTORE_NEW_LIST = 506,
  SCENE_CMD_ID_FOREIGN_APPSTORE_SPECIAL_PAGE = 507,
  SCENE_CMD_ID_SHOP_RECOMMEND_FOR_YOU = 600,
  SCENE_CMD_ID_SHOP_PRODUCT_GROUP_REC_PREDICT = 601,
  SCENE_CMD_ID_SHOP_DETAIL_VIEW_AGAIN = 602,
  SCENE_CMD_ID_SHOP_GUESS_YOU_LIKE = 603,
  SCENE_CMD_ID_SHOP_RECOMMEND = 606,
  SCENE_CMD_ID_SHOP_BUY_AND_BUY = 611,
  SCENE_CMD_ID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SCENE_CMD_ID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SCENE_CMD_ID_IsValid(int value);
const SCENE_CMD_ID SCENE_CMD_ID_MIN = UNKNOWN;
const SCENE_CMD_ID SCENE_CMD_ID_MAX = SCENE_CMD_ID_SHOP_BUY_AND_BUY;
const int SCENE_CMD_ID_ARRAYSIZE = SCENE_CMD_ID_MAX + 1;

// ===================================================================

class AllTestInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AllTestInfo) */ {
 public:
  AllTestInfo();
  virtual ~AllTestInfo();

  AllTestInfo(const AllTestInfo& from);

  inline AllTestInfo& operator=(const AllTestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AllTestInfo(AllTestInfo&& from) noexcept
    : AllTestInfo() {
    *this = ::std::move(from);
  }

  inline AllTestInfo& operator=(AllTestInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AllTestInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AllTestInfo* internal_default_instance() {
    return reinterpret_cast<const AllTestInfo*>(
               &_AllTestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AllTestInfo* other);
  friend void swap(AllTestInfo& a, AllTestInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AllTestInfo* New() const final {
    return CreateMaybeMessage<AllTestInfo>(NULL);
  }

  AllTestInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AllTestInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AllTestInfo& from);
  void MergeFrom(const AllTestInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AllTestInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .so_rtrs.AlgMultiTestInfo vecTestInfo = 1;
  int vectestinfo_size() const;
  void clear_vectestinfo();
  static const int kVecTestInfoFieldNumber = 1;
  ::so_rtrs::AlgMultiTestInfo* mutable_vectestinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
      mutable_vectestinfo();
  const ::so_rtrs::AlgMultiTestInfo& vectestinfo(int index) const;
  ::so_rtrs::AlgMultiTestInfo* add_vectestinfo();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
      vectestinfo() const;

  // string debug_error = 2;
  void clear_debug_error();
  static const int kDebugErrorFieldNumber = 2;
  const ::std::string& debug_error() const;
  void set_debug_error(const ::std::string& value);
  #if LANG_CXX11
  void set_debug_error(::std::string&& value);
  #endif
  void set_debug_error(const char* value);
  void set_debug_error(const char* value, size_t size);
  ::std::string* mutable_debug_error();
  ::std::string* release_debug_error();
  void set_allocated_debug_error(::std::string* debug_error);

  // @@protoc_insertion_point(class_scope:so_rtrs.AllTestInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo > vectestinfo_;
  ::google::protobuf::internal::ArenaStringPtr debug_error_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PredictorInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.PredictorInfo) */ {
 public:
  PredictorInfo();
  virtual ~PredictorInfo();

  PredictorInfo(const PredictorInfo& from);

  inline PredictorInfo& operator=(const PredictorInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PredictorInfo(PredictorInfo&& from) noexcept
    : PredictorInfo() {
    *this = ::std::move(from);
  }

  inline PredictorInfo& operator=(PredictorInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const PredictorInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PredictorInfo* internal_default_instance() {
    return reinterpret_cast<const PredictorInfo*>(
               &_PredictorInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PredictorInfo* other);
  friend void swap(PredictorInfo& a, PredictorInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PredictorInfo* New() const final {
    return CreateMaybeMessage<PredictorInfo>(NULL);
  }

  PredictorInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PredictorInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const PredictorInfo& from);
  void MergeFrom(const PredictorInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PredictorInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string platform = 1;
  void clear_platform();
  static const int kPlatformFieldNumber = 1;
  const ::std::string& platform() const;
  void set_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_platform(::std::string&& value);
  #endif
  void set_platform(const char* value);
  void set_platform(const char* value, size_t size);
  ::std::string* mutable_platform();
  ::std::string* release_platform();
  void set_allocated_platform(::std::string* platform);

  // string modelName = 2;
  void clear_modelname();
  static const int kModelNameFieldNumber = 2;
  const ::std::string& modelname() const;
  void set_modelname(const ::std::string& value);
  #if LANG_CXX11
  void set_modelname(::std::string&& value);
  #endif
  void set_modelname(const char* value);
  void set_modelname(const char* value, size_t size);
  ::std::string* mutable_modelname();
  ::std::string* release_modelname();
  void set_allocated_modelname(::std::string* modelname);

  // double powerRatio = 3;
  void clear_powerratio();
  static const int kPowerRatioFieldNumber = 3;
  double powerratio() const;
  void set_powerratio(double value);

  // @@protoc_insertion_point(class_scope:so_rtrs.PredictorInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr platform_;
  ::google::protobuf::internal::ArenaStringPtr modelname_;
  double powerratio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneSubAlgInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.SceneSubAlgInfo) */ {
 public:
  SceneSubAlgInfo();
  virtual ~SceneSubAlgInfo();

  SceneSubAlgInfo(const SceneSubAlgInfo& from);

  inline SceneSubAlgInfo& operator=(const SceneSubAlgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneSubAlgInfo(SceneSubAlgInfo&& from) noexcept
    : SceneSubAlgInfo() {
    *this = ::std::move(from);
  }

  inline SceneSubAlgInfo& operator=(SceneSubAlgInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SceneSubAlgInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSubAlgInfo* internal_default_instance() {
    return reinterpret_cast<const SceneSubAlgInfo*>(
               &_SceneSubAlgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SceneSubAlgInfo* other);
  friend void swap(SceneSubAlgInfo& a, SceneSubAlgInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneSubAlgInfo* New() const final {
    return CreateMaybeMessage<SceneSubAlgInfo>(NULL);
  }

  SceneSubAlgInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneSubAlgInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SceneSubAlgInfo& from);
  void MergeFrom(const SceneSubAlgInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SceneSubAlgInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string rankAlgs = 1;
  int rankalgs_size() const;
  void clear_rankalgs();
  static const int kRankAlgsFieldNumber = 1;
  const ::std::string& rankalgs(int index) const;
  ::std::string* mutable_rankalgs(int index);
  void set_rankalgs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_rankalgs(int index, ::std::string&& value);
  #endif
  void set_rankalgs(int index, const char* value);
  void set_rankalgs(int index, const char* value, size_t size);
  ::std::string* add_rankalgs();
  void add_rankalgs(const ::std::string& value);
  #if LANG_CXX11
  void add_rankalgs(::std::string&& value);
  #endif
  void add_rankalgs(const char* value);
  void add_rankalgs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& rankalgs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rankalgs();

  // repeated string recallAlgs = 2;
  int recallalgs_size() const;
  void clear_recallalgs();
  static const int kRecallAlgsFieldNumber = 2;
  const ::std::string& recallalgs(int index) const;
  ::std::string* mutable_recallalgs(int index);
  void set_recallalgs(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_recallalgs(int index, ::std::string&& value);
  #endif
  void set_recallalgs(int index, const char* value);
  void set_recallalgs(int index, const char* value, size_t size);
  ::std::string* add_recallalgs();
  void add_recallalgs(const ::std::string& value);
  #if LANG_CXX11
  void add_recallalgs(::std::string&& value);
  #endif
  void add_recallalgs(const char* value);
  void add_recallalgs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& recallalgs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_recallalgs();

  // repeated .so_rtrs.PredictorInfo predictors = 3;
  int predictors_size() const;
  void clear_predictors();
  static const int kPredictorsFieldNumber = 3;
  ::so_rtrs::PredictorInfo* mutable_predictors(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::PredictorInfo >*
      mutable_predictors();
  const ::so_rtrs::PredictorInfo& predictors(int index) const;
  ::so_rtrs::PredictorInfo* add_predictors();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::PredictorInfo >&
      predictors() const;

  // @@protoc_insertion_point(class_scope:so_rtrs.SceneSubAlgInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> rankalgs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> recallalgs_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::PredictorInfo > predictors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SeviceSceneInsulateInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.SeviceSceneInsulateInfo) */ {
 public:
  SeviceSceneInsulateInfo();
  virtual ~SeviceSceneInsulateInfo();

  SeviceSceneInsulateInfo(const SeviceSceneInsulateInfo& from);

  inline SeviceSceneInsulateInfo& operator=(const SeviceSceneInsulateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeviceSceneInsulateInfo(SeviceSceneInsulateInfo&& from) noexcept
    : SeviceSceneInsulateInfo() {
    *this = ::std::move(from);
  }

  inline SeviceSceneInsulateInfo& operator=(SeviceSceneInsulateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const SeviceSceneInsulateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeviceSceneInsulateInfo* internal_default_instance() {
    return reinterpret_cast<const SeviceSceneInsulateInfo*>(
               &_SeviceSceneInsulateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SeviceSceneInsulateInfo* other);
  friend void swap(SeviceSceneInsulateInfo& a, SeviceSceneInsulateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeviceSceneInsulateInfo* New() const final {
    return CreateMaybeMessage<SeviceSceneInsulateInfo>(NULL);
  }

  SeviceSceneInsulateInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SeviceSceneInsulateInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const SeviceSceneInsulateInfo& from);
  void MergeFrom(const SeviceSceneInsulateInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SeviceSceneInsulateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string serviceName = 2;
  void clear_servicename();
  static const int kServiceNameFieldNumber = 2;
  const ::std::string& servicename() const;
  void set_servicename(const ::std::string& value);
  #if LANG_CXX11
  void set_servicename(::std::string&& value);
  #endif
  void set_servicename(const char* value);
  void set_servicename(const char* value, size_t size);
  ::std::string* mutable_servicename();
  ::std::string* release_servicename();
  void set_allocated_servicename(::std::string* servicename);

  // string serviceNameSuffix = 3;
  void clear_servicenamesuffix();
  static const int kServiceNameSuffixFieldNumber = 3;
  const ::std::string& servicenamesuffix() const;
  void set_servicenamesuffix(const ::std::string& value);
  #if LANG_CXX11
  void set_servicenamesuffix(::std::string&& value);
  #endif
  void set_servicenamesuffix(const char* value);
  void set_servicenamesuffix(const char* value, size_t size);
  ::std::string* mutable_servicenamesuffix();
  ::std::string* release_servicenamesuffix();
  void set_allocated_servicenamesuffix(::std::string* servicenamesuffix);

  // bool isEffect = 1;
  void clear_iseffect();
  static const int kIsEffectFieldNumber = 1;
  bool iseffect() const;
  void set_iseffect(bool value);

  // @@protoc_insertion_point(class_scope:so_rtrs.SeviceSceneInsulateInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr servicename_;
  ::google::protobuf::internal::ArenaStringPtr servicenamesuffix_;
  bool iseffect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceInfo* other);
  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(NULL);
  }

  DeviceInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 preferInfos = 12;
  int preferinfos_size() const;
  void clear_preferinfos();
  static const int kPreferInfosFieldNumber = 12;
  ::google::protobuf::int32 preferinfos(int index) const;
  void set_preferinfos(int index, ::google::protobuf::int32 value);
  void add_preferinfos(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      preferinfos() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_preferinfos();

  // string androidId = 1;
  void clear_androidid();
  static const int kAndroidIdFieldNumber = 1;
  const ::std::string& androidid() const;
  void set_androidid(const ::std::string& value);
  #if LANG_CXX11
  void set_androidid(::std::string&& value);
  #endif
  void set_androidid(const char* value);
  void set_androidid(const char* value, size_t size);
  ::std::string* mutable_androidid();
  ::std::string* release_androidid();
  void set_allocated_androidid(::std::string* androidid);

  // string imei = 2;
  void clear_imei();
  static const int kImeiFieldNumber = 2;
  const ::std::string& imei() const;
  void set_imei(const ::std::string& value);
  #if LANG_CXX11
  void set_imei(::std::string&& value);
  #endif
  void set_imei(const char* value);
  void set_imei(const char* value, size_t size);
  ::std::string* mutable_imei();
  ::std::string* release_imei();
  void set_allocated_imei(::std::string* imei);

  // string language = 4;
  void clear_language();
  static const int kLanguageFieldNumber = 4;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // string manufacturer = 5;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 5;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string modelName = 6;
  void clear_modelname();
  static const int kModelNameFieldNumber = 6;
  const ::std::string& modelname() const;
  void set_modelname(const ::std::string& value);
  #if LANG_CXX11
  void set_modelname(::std::string&& value);
  #endif
  void set_modelname(const char* value);
  void set_modelname(const char* value, size_t size);
  ::std::string* mutable_modelname();
  ::std::string* release_modelname();
  void set_allocated_modelname(::std::string* modelname);

  // string osVersion = 7;
  void clear_osversion();
  static const int kOsVersionFieldNumber = 7;
  const ::std::string& osversion() const;
  void set_osversion(const ::std::string& value);
  #if LANG_CXX11
  void set_osversion(::std::string&& value);
  #endif
  void set_osversion(const char* value);
  void set_osversion(const char* value, size_t size);
  ::std::string* mutable_osversion();
  ::std::string* release_osversion();
  void set_allocated_osversion(::std::string* osversion);

  // string resolution = 8;
  void clear_resolution();
  static const int kResolutionFieldNumber = 8;
  const ::std::string& resolution() const;
  void set_resolution(const ::std::string& value);
  #if LANG_CXX11
  void set_resolution(::std::string&& value);
  #endif
  void set_resolution(const char* value);
  void set_resolution(const char* value, size_t size);
  ::std::string* mutable_resolution();
  ::std::string* release_resolution();
  void set_allocated_resolution(::std::string* resolution);

  // string macAddr = 9;
  void clear_macaddr();
  static const int kMacAddrFieldNumber = 9;
  const ::std::string& macaddr() const;
  void set_macaddr(const ::std::string& value);
  #if LANG_CXX11
  void set_macaddr(::std::string&& value);
  #endif
  void set_macaddr(const char* value);
  void set_macaddr(const char* value, size_t size);
  ::std::string* mutable_macaddr();
  ::std::string* release_macaddr();
  void set_allocated_macaddr(::std::string* macaddr);

  // string clientVersion = 10;
  void clear_clientversion();
  static const int kClientVersionFieldNumber = 10;
  const ::std::string& clientversion() const;
  void set_clientversion(const ::std::string& value);
  #if LANG_CXX11
  void set_clientversion(::std::string&& value);
  #endif
  void set_clientversion(const char* value);
  void set_clientversion(const char* value, size_t size);
  ::std::string* mutable_clientversion();
  ::std::string* release_clientversion();
  void set_allocated_clientversion(::std::string* clientversion);

  // int64 superUser = 3;
  void clear_superuser();
  static const int kSuperUserFieldNumber = 3;
  ::google::protobuf::int64 superuser() const;
  void set_superuser(::google::protobuf::int64 value);

  // int64 addAttribute = 11;
  void clear_addattribute();
  static const int kAddAttributeFieldNumber = 11;
  ::google::protobuf::int64 addattribute() const;
  void set_addattribute(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.DeviceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > preferinfos_;
  mutable int _preferinfos_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr androidid_;
  ::google::protobuf::internal::ArenaStringPtr imei_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr modelname_;
  ::google::protobuf::internal::ArenaStringPtr osversion_;
  ::google::protobuf::internal::ArenaStringPtr resolution_;
  ::google::protobuf::internal::ArenaStringPtr macaddr_;
  ::google::protobuf::internal::ArenaStringPtr clientversion_;
  ::google::protobuf::int64 superuser_;
  ::google::protobuf::int64 addattribute_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocationInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.LocationInfo) */ {
 public:
  LocationInfo();
  virtual ~LocationInfo();

  LocationInfo(const LocationInfo& from);

  inline LocationInfo& operator=(const LocationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationInfo(LocationInfo&& from) noexcept
    : LocationInfo() {
    *this = ::std::move(from);
  }

  inline LocationInfo& operator=(LocationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const LocationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationInfo* internal_default_instance() {
    return reinterpret_cast<const LocationInfo*>(
               &_LocationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(LocationInfo* other);
  friend void swap(LocationInfo& a, LocationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationInfo* New() const final {
    return CreateMaybeMessage<LocationInfo>(NULL);
  }

  LocationInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LocationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const LocationInfo& from);
  void MergeFrom(const LocationInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string city = 1;
  void clear_city();
  static const int kCityFieldNumber = 1;
  const ::std::string& city() const;
  void set_city(const ::std::string& value);
  #if LANG_CXX11
  void set_city(::std::string&& value);
  #endif
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  ::std::string* mutable_city();
  ::std::string* release_city();
  void set_allocated_city(::std::string* city);

  // string longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  const ::std::string& longitude() const;
  void set_longitude(const ::std::string& value);
  #if LANG_CXX11
  void set_longitude(::std::string&& value);
  #endif
  void set_longitude(const char* value);
  void set_longitude(const char* value, size_t size);
  ::std::string* mutable_longitude();
  ::std::string* release_longitude();
  void set_allocated_longitude(::std::string* longitude);

  // string timezone = 3;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 3;
  const ::std::string& timezone() const;
  void set_timezone(const ::std::string& value);
  #if LANG_CXX11
  void set_timezone(::std::string&& value);
  #endif
  void set_timezone(const char* value);
  void set_timezone(const char* value, size_t size);
  ::std::string* mutable_timezone();
  ::std::string* release_timezone();
  void set_allocated_timezone(::std::string* timezone);

  // @@protoc_insertion_point(class_scope:so_rtrs.LocationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr city_;
  ::google::protobuf::internal::ArenaStringPtr longitude_;
  ::google::protobuf::internal::ArenaStringPtr timezone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NetworkInfo* other);
  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(NULL);
  }

  NetworkInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string imsi = 1;
  void clear_imsi();
  static const int kImsiFieldNumber = 1;
  const ::std::string& imsi() const;
  void set_imsi(const ::std::string& value);
  #if LANG_CXX11
  void set_imsi(::std::string&& value);
  #endif
  void set_imsi(const char* value);
  void set_imsi(const char* value, size_t size);
  ::std::string* mutable_imsi();
  ::std::string* release_imsi();
  void set_allocated_imsi(::std::string* imsi);

  // string networkType = 2;
  void clear_networktype();
  static const int kNetworkTypeFieldNumber = 2;
  const ::std::string& networktype() const;
  void set_networktype(const ::std::string& value);
  #if LANG_CXX11
  void set_networktype(::std::string&& value);
  #endif
  void set_networktype(const char* value);
  void set_networktype(const char* value, size_t size);
  ::std::string* mutable_networktype();
  ::std::string* release_networktype();
  void set_allocated_networktype(::std::string* networktype);

  // string networkOperator = 3;
  void clear_networkoperator();
  static const int kNetworkOperatorFieldNumber = 3;
  const ::std::string& networkoperator() const;
  void set_networkoperator(const ::std::string& value);
  #if LANG_CXX11
  void set_networkoperator(::std::string&& value);
  #endif
  void set_networkoperator(const char* value);
  void set_networkoperator(const char* value, size_t size);
  ::std::string* mutable_networkoperator();
  ::std::string* release_networkoperator();
  void set_allocated_networkoperator(::std::string* networkoperator);

  // string phoneNumber = 4;
  void clear_phonenumber();
  static const int kPhoneNumberFieldNumber = 4;
  const ::std::string& phonenumber() const;
  void set_phonenumber(const ::std::string& value);
  #if LANG_CXX11
  void set_phonenumber(::std::string&& value);
  #endif
  void set_phonenumber(const char* value);
  void set_phonenumber(const char* value, size_t size);
  ::std::string* mutable_phonenumber();
  ::std::string* release_phonenumber();
  void set_allocated_phonenumber(::std::string* phonenumber);

  // string clientIp = 5;
  void clear_clientip();
  static const int kClientIpFieldNumber = 5;
  const ::std::string& clientip() const;
  void set_clientip(const ::std::string& value);
  #if LANG_CXX11
  void set_clientip(::std::string&& value);
  #endif
  void set_clientip(const char* value);
  void set_clientip(const char* value, size_t size);
  ::std::string* mutable_clientip();
  ::std::string* release_clientip();
  void set_allocated_clientip(::std::string* clientip);

  // string wifiSsid = 6;
  void clear_wifissid();
  static const int kWifiSsidFieldNumber = 6;
  const ::std::string& wifissid() const;
  void set_wifissid(const ::std::string& value);
  #if LANG_CXX11
  void set_wifissid(::std::string&& value);
  #endif
  void set_wifissid(const char* value);
  void set_wifissid(const char* value, size_t size);
  ::std::string* mutable_wifissid();
  ::std::string* release_wifissid();
  void set_allocated_wifissid(::std::string* wifissid);

  // string wifiBssid = 7;
  void clear_wifibssid();
  static const int kWifiBssidFieldNumber = 7;
  const ::std::string& wifibssid() const;
  void set_wifibssid(const ::std::string& value);
  #if LANG_CXX11
  void set_wifibssid(::std::string&& value);
  #endif
  void set_wifibssid(const char* value);
  void set_wifibssid(const char* value, size_t size);
  ::std::string* mutable_wifibssid();
  ::std::string* release_wifibssid();
  void set_allocated_wifibssid(::std::string* wifibssid);

  // @@protoc_insertion_point(class_scope:so_rtrs.NetworkInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr imsi_;
  ::google::protobuf::internal::ArenaStringPtr networktype_;
  ::google::protobuf::internal::ArenaStringPtr networkoperator_;
  ::google::protobuf::internal::ArenaStringPtr phonenumber_;
  ::google::protobuf::internal::ArenaStringPtr clientip_;
  ::google::protobuf::internal::ArenaStringPtr wifissid_;
  ::google::protobuf::internal::ArenaStringPtr wifibssid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AdItemInfo_IdeaMapEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<AdItemInfo_IdeaMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<AdItemInfo_IdeaMapEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  AdItemInfo_IdeaMapEntry_DoNotUse();
  AdItemInfo_IdeaMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const AdItemInfo_IdeaMapEntry_DoNotUse& other);
  static const AdItemInfo_IdeaMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdItemInfo_IdeaMapEntry_DoNotUse*>(&_AdItemInfo_IdeaMapEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class AdItemInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AdItemInfo) */ {
 public:
  AdItemInfo();
  virtual ~AdItemInfo();

  AdItemInfo(const AdItemInfo& from);

  inline AdItemInfo& operator=(const AdItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AdItemInfo(AdItemInfo&& from) noexcept
    : AdItemInfo() {
    *this = ::std::move(from);
  }

  inline AdItemInfo& operator=(AdItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AdItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AdItemInfo* internal_default_instance() {
    return reinterpret_cast<const AdItemInfo*>(
               &_AdItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(AdItemInfo* other);
  friend void swap(AdItemInfo& a, AdItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AdItemInfo* New() const final {
    return CreateMaybeMessage<AdItemInfo>(NULL);
  }

  AdItemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AdItemInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AdItemInfo& from);
  void MergeFrom(const AdItemInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> ideaMap = 8;
  int ideamap_size() const;
  void clear_ideamap();
  static const int kIdeaMapFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      ideamap() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_ideamap();

  // string traceId = 1;
  void clear_traceid();
  static const int kTraceIdFieldNumber = 1;
  const ::std::string& traceid() const;
  void set_traceid(const ::std::string& value);
  #if LANG_CXX11
  void set_traceid(::std::string&& value);
  #endif
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  ::std::string* mutable_traceid();
  ::std::string* release_traceid();
  void set_allocated_traceid(::std::string* traceid);

  // string adTxt = 2;
  void clear_adtxt();
  static const int kAdTxtFieldNumber = 2;
  const ::std::string& adtxt() const;
  void set_adtxt(const ::std::string& value);
  #if LANG_CXX11
  void set_adtxt(::std::string&& value);
  #endif
  void set_adtxt(const char* value);
  void set_adtxt(const char* value, size_t size);
  ::std::string* mutable_adtxt();
  ::std::string* release_adtxt();
  void set_allocated_adtxt(::std::string* adtxt);

  // string currentIdea = 9;
  void clear_currentidea();
  static const int kCurrentIdeaFieldNumber = 9;
  const ::std::string& currentidea() const;
  void set_currentidea(const ::std::string& value);
  #if LANG_CXX11
  void set_currentidea(::std::string&& value);
  #endif
  void set_currentidea(const char* value);
  void set_currentidea(const char* value, size_t size);
  ::std::string* mutable_currentidea();
  ::std::string* release_currentidea();
  void set_allocated_currentidea(::std::string* currentidea);

  // int32 adType = 3;
  void clear_adtype();
  static const int kAdTypeFieldNumber = 3;
  ::google::protobuf::int32 adtype() const;
  void set_adtype(::google::protobuf::int32 value);

  // int32 startTime = 4;
  void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::int32 starttime() const;
  void set_starttime(::google::protobuf::int32 value);

  // double price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  double price() const;
  void set_price(double value);

  // int32 endTime = 5;
  void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::int32 endtime() const;
  void set_endtime(::google::protobuf::int32 value);

  // int32 costType = 7;
  void clear_costtype();
  static const int kCostTypeFieldNumber = 7;
  ::google::protobuf::int32 costtype() const;
  void set_costtype(::google::protobuf::int32 value);

  // int64 creativeid = 11;
  void clear_creativeid();
  static const int kCreativeidFieldNumber = 11;
  ::google::protobuf::int64 creativeid() const;
  void set_creativeid(::google::protobuf::int64 value);

  // int32 pricingType = 10;
  void clear_pricingtype();
  static const int kPricingTypeFieldNumber = 10;
  ::google::protobuf::int32 pricingtype() const;
  void set_pricingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.AdItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      AdItemInfo_IdeaMapEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > ideamap_;
  ::google::protobuf::internal::ArenaStringPtr traceid_;
  ::google::protobuf::internal::ArenaStringPtr adtxt_;
  ::google::protobuf::internal::ArenaStringPtr currentidea_;
  ::google::protobuf::int32 adtype_;
  ::google::protobuf::int32 starttime_;
  double price_;
  ::google::protobuf::int32 endtime_;
  ::google::protobuf::int32 costtype_;
  ::google::protobuf::int64 creativeid_;
  ::google::protobuf::int32 pricingtype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecommendItem_MapContextEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecommendItem_MapContextEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecommendItem_MapContextEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RecommendItem_MapContextEntry_DoNotUse();
  RecommendItem_MapContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecommendItem_MapContextEntry_DoNotUse& other);
  static const RecommendItem_MapContextEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecommendItem_MapContextEntry_DoNotUse*>(&_RecommendItem_MapContextEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecommendItem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.RecommendItem) */ {
 public:
  RecommendItem();
  virtual ~RecommendItem();

  RecommendItem(const RecommendItem& from);

  inline RecommendItem& operator=(const RecommendItem& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecommendItem(RecommendItem&& from) noexcept
    : RecommendItem() {
    *this = ::std::move(from);
  }

  inline RecommendItem& operator=(RecommendItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecommendItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecommendItem* internal_default_instance() {
    return reinterpret_cast<const RecommendItem*>(
               &_RecommendItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(RecommendItem* other);
  friend void swap(RecommendItem& a, RecommendItem& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecommendItem* New() const final {
    return CreateMaybeMessage<RecommendItem>(NULL);
  }

  RecommendItem* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecommendItem>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecommendItem& from);
  void MergeFrom(const RecommendItem& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecommendItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> mapContext = 10;
  int mapcontext_size() const;
  void clear_mapcontext();
  static const int kMapContextFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      mapcontext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_mapcontext();

  // string recomReason = 3;
  void clear_recomreason();
  static const int kRecomReasonFieldNumber = 3;
  const ::std::string& recomreason() const;
  void set_recomreason(const ::std::string& value);
  #if LANG_CXX11
  void set_recomreason(::std::string&& value);
  #endif
  void set_recomreason(const char* value);
  void set_recomreason(const char* value, size_t size);
  ::std::string* mutable_recomreason();
  ::std::string* release_recomreason();
  void set_allocated_recomreason(::std::string* recomreason);

  // string traceId = 7;
  void clear_traceid();
  static const int kTraceIdFieldNumber = 7;
  const ::std::string& traceid() const;
  void set_traceid(const ::std::string& value);
  #if LANG_CXX11
  void set_traceid(::std::string&& value);
  #endif
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  ::std::string* mutable_traceid();
  ::std::string* release_traceid();
  void set_allocated_traceid(::std::string* traceid);

  // string strId = 8;
  void clear_strid();
  static const int kStrIdFieldNumber = 8;
  const ::std::string& strid() const;
  void set_strid(const ::std::string& value);
  #if LANG_CXX11
  void set_strid(::std::string&& value);
  #endif
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  ::std::string* mutable_strid();
  ::std::string* release_strid();
  void set_allocated_strid(::std::string* strid);

  // string appname = 9;
  void clear_appname();
  static const int kAppnameFieldNumber = 9;
  const ::std::string& appname() const;
  void set_appname(const ::std::string& value);
  #if LANG_CXX11
  void set_appname(::std::string&& value);
  #endif
  void set_appname(const char* value);
  void set_appname(const char* value, size_t size);
  ::std::string* mutable_appname();
  ::std::string* release_appname();
  void set_allocated_appname(::std::string* appname);

  // .so_rtrs.AdItemInfo adInfo = 5;
  bool has_adinfo() const;
  void clear_adinfo();
  static const int kAdInfoFieldNumber = 5;
  private:
  const ::so_rtrs::AdItemInfo& _internal_adinfo() const;
  public:
  const ::so_rtrs::AdItemInfo& adinfo() const;
  ::so_rtrs::AdItemInfo* release_adinfo();
  ::so_rtrs::AdItemInfo* mutable_adinfo();
  void set_allocated_adinfo(::so_rtrs::AdItemInfo* adinfo);

  // int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // double score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  double score() const;
  void set_score(double value);

  // double cvr = 6;
  void clear_cvr();
  static const int kCvrFieldNumber = 6;
  double cvr() const;
  void set_cvr(double value);

  // int32 versionCode = 4;
  void clear_versioncode();
  static const int kVersionCodeFieldNumber = 4;
  ::google::protobuf::int32 versioncode() const;
  void set_versioncode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.RecommendItem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      RecommendItem_MapContextEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > mapcontext_;
  ::google::protobuf::internal::ArenaStringPtr recomreason_;
  ::google::protobuf::internal::ArenaStringPtr traceid_;
  ::google::protobuf::internal::ArenaStringPtr strid_;
  ::google::protobuf::internal::ArenaStringPtr appname_;
  ::so_rtrs::AdItemInfo* adinfo_;
  ::google::protobuf::int64 id_;
  double score_;
  double cvr_;
  ::google::protobuf::int32 versioncode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Interval : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.Interval) */ {
 public:
  Interval();
  virtual ~Interval();

  Interval(const Interval& from);

  inline Interval& operator=(const Interval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Interval(Interval&& from) noexcept
    : Interval() {
    *this = ::std::move(from);
  }

  inline Interval& operator=(Interval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Interval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interval* internal_default_instance() {
    return reinterpret_cast<const Interval*>(
               &_Interval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Interval* other);
  friend void swap(Interval& a, Interval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Interval* New() const final {
    return CreateMaybeMessage<Interval>(NULL);
  }

  Interval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Interval>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const Interval& from);
  void MergeFrom(const Interval& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Interval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double lowerLimit = 1;
  void clear_lowerlimit();
  static const int kLowerLimitFieldNumber = 1;
  double lowerlimit() const;
  void set_lowerlimit(double value);

  // double upperLimit = 2;
  void clear_upperlimit();
  static const int kUpperLimitFieldNumber = 2;
  double upperlimit() const;
  void set_upperlimit(double value);

  // @@protoc_insertion_point(class_scope:so_rtrs.Interval)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  double lowerlimit_;
  double upperlimit_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AgeSexInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.AgeSexInfo) */ {
 public:
  AgeSexInfo();
  virtual ~AgeSexInfo();

  AgeSexInfo(const AgeSexInfo& from);

  inline AgeSexInfo& operator=(const AgeSexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgeSexInfo(AgeSexInfo&& from) noexcept
    : AgeSexInfo() {
    *this = ::std::move(from);
  }

  inline AgeSexInfo& operator=(AgeSexInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const AgeSexInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgeSexInfo* internal_default_instance() {
    return reinterpret_cast<const AgeSexInfo*>(
               &_AgeSexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(AgeSexInfo* other);
  friend void swap(AgeSexInfo& a, AgeSexInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgeSexInfo* New() const final {
    return CreateMaybeMessage<AgeSexInfo>(NULL);
  }

  AgeSexInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AgeSexInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AgeSexInfo& from);
  void MergeFrom(const AgeSexInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AgeSexInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .so_rtrs.Interval ageInterval = 2;
  int ageinterval_size() const;
  void clear_ageinterval();
  static const int kAgeIntervalFieldNumber = 2;
  ::so_rtrs::Interval* mutable_ageinterval(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >*
      mutable_ageinterval();
  const ::so_rtrs::Interval& ageinterval(int index) const;
  ::so_rtrs::Interval* add_ageinterval();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >&
      ageinterval() const;

  // bool isIncludeAge = 1;
  void clear_isincludeage();
  static const int kIsIncludeAgeFieldNumber = 1;
  bool isincludeage() const;
  void set_isincludeage(bool value);

  // bool isIncludeSex = 3;
  void clear_isincludesex();
  static const int kIsIncludeSexFieldNumber = 3;
  bool isincludesex() const;
  void set_isincludesex(bool value);

  // int32 sex = 4;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.AgeSexInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval > ageinterval_;
  bool isincludeage_;
  bool isincludesex_;
  ::google::protobuf::int32 sex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IncomeCityInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.IncomeCityInfo) */ {
 public:
  IncomeCityInfo();
  virtual ~IncomeCityInfo();

  IncomeCityInfo(const IncomeCityInfo& from);

  inline IncomeCityInfo& operator=(const IncomeCityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IncomeCityInfo(IncomeCityInfo&& from) noexcept
    : IncomeCityInfo() {
    *this = ::std::move(from);
  }

  inline IncomeCityInfo& operator=(IncomeCityInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const IncomeCityInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IncomeCityInfo* internal_default_instance() {
    return reinterpret_cast<const IncomeCityInfo*>(
               &_IncomeCityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(IncomeCityInfo* other);
  friend void swap(IncomeCityInfo& a, IncomeCityInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IncomeCityInfo* New() const final {
    return CreateMaybeMessage<IncomeCityInfo>(NULL);
  }

  IncomeCityInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IncomeCityInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const IncomeCityInfo& from);
  void MergeFrom(const IncomeCityInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomeCityInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .so_rtrs.Interval incomeInterval = 2;
  int incomeinterval_size() const;
  void clear_incomeinterval();
  static const int kIncomeIntervalFieldNumber = 2;
  ::so_rtrs::Interval* mutable_incomeinterval(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >*
      mutable_incomeinterval();
  const ::so_rtrs::Interval& incomeinterval(int index) const;
  ::so_rtrs::Interval* add_incomeinterval();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >&
      incomeinterval() const;

  // repeated uint32 vecCityId = 4;
  int veccityid_size() const;
  void clear_veccityid();
  static const int kVecCityIdFieldNumber = 4;
  ::google::protobuf::uint32 veccityid(int index) const;
  void set_veccityid(int index, ::google::protobuf::uint32 value);
  void add_veccityid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      veccityid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_veccityid();

  // bool isIncludeIncome = 1;
  void clear_isincludeincome();
  static const int kIsIncludeIncomeFieldNumber = 1;
  bool isincludeincome() const;
  void set_isincludeincome(bool value);

  // bool isIncludeCity = 3;
  void clear_isincludecity();
  static const int kIsIncludeCityFieldNumber = 3;
  bool isincludecity() const;
  void set_isincludecity(bool value);

  // @@protoc_insertion_point(class_scope:so_rtrs.IncomeCityInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval > incomeinterval_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > veccityid_;
  mutable int _veccityid_cached_byte_size_;
  bool isincludeincome_;
  bool isincludecity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RuleAppDirectInfo_MapTagInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RuleAppDirectInfo_MapTagInfoEntry_DoNotUse, 
    ::google::protobuf::uint32, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RuleAppDirectInfo_MapTagInfoEntry_DoNotUse, 
    ::google::protobuf::uint32, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  RuleAppDirectInfo_MapTagInfoEntry_DoNotUse();
  RuleAppDirectInfo_MapTagInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RuleAppDirectInfo_MapTagInfoEntry_DoNotUse& other);
  static const RuleAppDirectInfo_MapTagInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RuleAppDirectInfo_MapTagInfoEntry_DoNotUse*>(&_RuleAppDirectInfo_MapTagInfoEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RuleAppDirectInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.RuleAppDirectInfo) */ {
 public:
  RuleAppDirectInfo();
  virtual ~RuleAppDirectInfo();

  RuleAppDirectInfo(const RuleAppDirectInfo& from);

  inline RuleAppDirectInfo& operator=(const RuleAppDirectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RuleAppDirectInfo(RuleAppDirectInfo&& from) noexcept
    : RuleAppDirectInfo() {
    *this = ::std::move(from);
  }

  inline RuleAppDirectInfo& operator=(RuleAppDirectInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RuleAppDirectInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RuleAppDirectInfo* internal_default_instance() {
    return reinterpret_cast<const RuleAppDirectInfo*>(
               &_RuleAppDirectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(RuleAppDirectInfo* other);
  friend void swap(RuleAppDirectInfo& a, RuleAppDirectInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RuleAppDirectInfo* New() const final {
    return CreateMaybeMessage<RuleAppDirectInfo>(NULL);
  }

  RuleAppDirectInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RuleAppDirectInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RuleAppDirectInfo& from);
  void MergeFrom(const RuleAppDirectInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RuleAppDirectInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, double> mapTagInfo = 1;
  int maptaginfo_size() const;
  void clear_maptaginfo();
  static const int kMapTagInfoFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, double >&
      maptaginfo() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, double >*
      mutable_maptaginfo();

  // repeated uint32 vecInstallAppIdKai = 3;
  int vecinstallappidkai_size() const;
  void clear_vecinstallappidkai();
  static const int kVecInstallAppIdKaiFieldNumber = 3;
  ::google::protobuf::uint32 vecinstallappidkai(int index) const;
  void set_vecinstallappidkai(int index, ::google::protobuf::uint32 value);
  void add_vecinstallappidkai(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vecinstallappidkai() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vecinstallappidkai();

  // repeated uint32 vecUnInstallAppIdKai = 4;
  int vecuninstallappidkai_size() const;
  void clear_vecuninstallappidkai();
  static const int kVecUnInstallAppIdKaiFieldNumber = 4;
  ::google::protobuf::uint32 vecuninstallappidkai(int index) const;
  void set_vecuninstallappidkai(int index, ::google::protobuf::uint32 value);
  void add_vecuninstallappidkai(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vecuninstallappidkai() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vecuninstallappidkai();

  // .so_rtrs.AgeSexInfo ageSexInfo = 5;
  bool has_agesexinfo() const;
  void clear_agesexinfo();
  static const int kAgeSexInfoFieldNumber = 5;
  private:
  const ::so_rtrs::AgeSexInfo& _internal_agesexinfo() const;
  public:
  const ::so_rtrs::AgeSexInfo& agesexinfo() const;
  ::so_rtrs::AgeSexInfo* release_agesexinfo();
  ::so_rtrs::AgeSexInfo* mutable_agesexinfo();
  void set_allocated_agesexinfo(::so_rtrs::AgeSexInfo* agesexinfo);

  // .so_rtrs.IncomeCityInfo incomeCityInfo = 6;
  bool has_incomecityinfo() const;
  void clear_incomecityinfo();
  static const int kIncomeCityInfoFieldNumber = 6;
  private:
  const ::so_rtrs::IncomeCityInfo& _internal_incomecityinfo() const;
  public:
  const ::so_rtrs::IncomeCityInfo& incomecityinfo() const;
  ::so_rtrs::IncomeCityInfo* release_incomecityinfo();
  ::so_rtrs::IncomeCityInfo* mutable_incomecityinfo();
  void set_allocated_incomecityinfo(::so_rtrs::IncomeCityInfo* incomecityinfo);

  // double exposePercent = 2;
  void clear_exposepercent();
  static const int kExposePercentFieldNumber = 2;
  double exposepercent() const;
  void set_exposepercent(double value);

  // @@protoc_insertion_point(class_scope:so_rtrs.RuleAppDirectInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      RuleAppDirectInfo_MapTagInfoEntry_DoNotUse,
      ::google::protobuf::uint32, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > maptaginfo_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vecinstallappidkai_;
  mutable int _vecinstallappidkai_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vecuninstallappidkai_;
  mutable int _vecuninstallappidkai_cached_byte_size_;
  ::so_rtrs::AgeSexInfo* agesexinfo_;
  ::so_rtrs::IncomeCityInfo* incomecityinfo_;
  double exposepercent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecommendInfo_MapItemEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecommendInfo_MapItemEntry_DoNotUse, 
    ::google::protobuf::int64, ::so_rtrs::RecommendItem,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecommendInfo_MapItemEntry_DoNotUse, 
    ::google::protobuf::int64, ::so_rtrs::RecommendItem,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RecommendInfo_MapItemEntry_DoNotUse();
  RecommendInfo_MapItemEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecommendInfo_MapItemEntry_DoNotUse& other);
  static const RecommendInfo_MapItemEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecommendInfo_MapItemEntry_DoNotUse*>(&_RecommendInfo_MapItemEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecommendInfo_MapContextEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecommendInfo_MapContextEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecommendInfo_MapContextEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RecommendInfo_MapContextEntry_DoNotUse();
  RecommendInfo_MapContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecommendInfo_MapContextEntry_DoNotUse& other);
  static const RecommendInfo_MapContextEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecommendInfo_MapContextEntry_DoNotUse*>(&_RecommendInfo_MapContextEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecommendInfo : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.RecommendInfo) */ {
 public:
  RecommendInfo();
  virtual ~RecommendInfo();

  RecommendInfo(const RecommendInfo& from);

  inline RecommendInfo& operator=(const RecommendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecommendInfo(RecommendInfo&& from) noexcept
    : RecommendInfo() {
    *this = ::std::move(from);
  }

  inline RecommendInfo& operator=(RecommendInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecommendInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecommendInfo* internal_default_instance() {
    return reinterpret_cast<const RecommendInfo*>(
               &_RecommendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(RecommendInfo* other);
  friend void swap(RecommendInfo& a, RecommendInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecommendInfo* New() const final {
    return CreateMaybeMessage<RecommendInfo>(NULL);
  }

  RecommendInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecommendInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecommendInfo& from);
  void MergeFrom(const RecommendInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecommendInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .so_rtrs.RecommendItem vecItem = 5;
  int vecitem_size() const;
  void clear_vecitem();
  static const int kVecItemFieldNumber = 5;
  ::so_rtrs::RecommendItem* mutable_vecitem(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::RecommendItem >*
      mutable_vecitem();
  const ::so_rtrs::RecommendItem& vecitem(int index) const;
  ::so_rtrs::RecommendItem* add_vecitem();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::RecommendItem >&
      vecitem() const;

  // map<int64, .so_rtrs.RecommendItem> mapItem = 6;
  int mapitem_size() const;
  void clear_mapitem();
  static const int kMapItemFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::int64, ::so_rtrs::RecommendItem >&
      mapitem() const;
  ::google::protobuf::Map< ::google::protobuf::int64, ::so_rtrs::RecommendItem >*
      mutable_mapitem();

  // map<string, string> mapContext = 12;
  int mapcontext_size() const;
  void clear_mapcontext();
  static const int kMapContextFieldNumber = 12;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      mapcontext() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_mapcontext();

  // string sceneSubAlg = 2;
  void clear_scenesubalg();
  static const int kSceneSubAlgFieldNumber = 2;
  const ::std::string& scenesubalg() const;
  void set_scenesubalg(const ::std::string& value);
  #if LANG_CXX11
  void set_scenesubalg(::std::string&& value);
  #endif
  void set_scenesubalg(const char* value);
  void set_scenesubalg(const char* value, size_t size);
  ::std::string* mutable_scenesubalg();
  ::std::string* release_scenesubalg();
  void set_allocated_scenesubalg(::std::string* scenesubalg);

  // string context = 3;
  void clear_context();
  static const int kContextFieldNumber = 3;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  #if LANG_CXX11
  void set_context(::std::string&& value);
  #endif
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // string traceId = 7;
  void clear_traceid();
  static const int kTraceIdFieldNumber = 7;
  const ::std::string& traceid() const;
  void set_traceid(const ::std::string& value);
  #if LANG_CXX11
  void set_traceid(::std::string&& value);
  #endif
  void set_traceid(const char* value);
  void set_traceid(const char* value, size_t size);
  ::std::string* mutable_traceid();
  ::std::string* release_traceid();
  void set_allocated_traceid(::std::string* traceid);

  // string query = 11;
  void clear_query();
  static const int kQueryFieldNumber = 11;
  const ::std::string& query() const;
  void set_query(const ::std::string& value);
  #if LANG_CXX11
  void set_query(::std::string&& value);
  #endif
  void set_query(const char* value);
  void set_query(const char* value, size_t size);
  ::std::string* mutable_query();
  ::std::string* release_query();
  void set_allocated_query(::std::string* query);

  // string sceneInfo = 18;
  void clear_sceneinfo();
  static const int kSceneInfoFieldNumber = 18;
  const ::std::string& sceneinfo() const;
  void set_sceneinfo(const ::std::string& value);
  #if LANG_CXX11
  void set_sceneinfo(::std::string&& value);
  #endif
  void set_sceneinfo(const char* value);
  void set_sceneinfo(const char* value, size_t size);
  ::std::string* mutable_sceneinfo();
  ::std::string* release_sceneinfo();
  void set_allocated_sceneinfo(::std::string* sceneinfo);

  // string positionIdStr = 19;
  void clear_positionidstr();
  static const int kPositionIdStrFieldNumber = 19;
  const ::std::string& positionidstr() const;
  void set_positionidstr(const ::std::string& value);
  #if LANG_CXX11
  void set_positionidstr(::std::string&& value);
  #endif
  void set_positionidstr(const char* value);
  void set_positionidstr(const char* value, size_t size);
  ::std::string* mutable_positionidstr();
  ::std::string* release_positionidstr();
  void set_allocated_positionidstr(::std::string* positionidstr);

  // string word_seg = 20;
  void clear_word_seg();
  static const int kWordSegFieldNumber = 20;
  const ::std::string& word_seg() const;
  void set_word_seg(const ::std::string& value);
  #if LANG_CXX11
  void set_word_seg(::std::string&& value);
  #endif
  void set_word_seg(const char* value);
  void set_word_seg(const char* value, size_t size);
  ::std::string* mutable_word_seg();
  ::std::string* release_word_seg();
  void set_allocated_word_seg(::std::string* word_seg);

  // .so_rtrs.SceneSubAlgInfo subAlgInfo = 17;
  bool has_subalginfo() const;
  void clear_subalginfo();
  static const int kSubAlgInfoFieldNumber = 17;
  private:
  const ::so_rtrs::SceneSubAlgInfo& _internal_subalginfo() const;
  public:
  const ::so_rtrs::SceneSubAlgInfo& subalginfo() const;
  ::so_rtrs::SceneSubAlgInfo* release_subalginfo();
  ::so_rtrs::SceneSubAlgInfo* mutable_subalginfo();
  void set_allocated_subalginfo(::so_rtrs::SceneSubAlgInfo* subalginfo);

  // .so_rtrs.SCENE_CMD_ID sceneId = 1;
  void clear_sceneid();
  static const int kSceneIdFieldNumber = 1;
  ::so_rtrs::SCENE_CMD_ID sceneid() const;
  void set_sceneid(::so_rtrs::SCENE_CMD_ID value);

  // int32 platformVersion = 4;
  void clear_platformversion();
  static const int kPlatformVersionFieldNumber = 4;
  ::google::protobuf::int32 platformversion() const;
  void set_platformversion(::google::protobuf::int32 value);

  // int32 totalResult = 8;
  void clear_totalresult();
  static const int kTotalResultFieldNumber = 8;
  ::google::protobuf::int32 totalresult() const;
  void set_totalresult(::google::protobuf::int32 value);

  // int32 indexBegin = 9;
  void clear_indexbegin();
  static const int kIndexBeginFieldNumber = 9;
  ::google::protobuf::int32 indexbegin() const;
  void set_indexbegin(::google::protobuf::int32 value);

  // int64 positionId = 13;
  void clear_positionid();
  static const int kPositionIdFieldNumber = 13;
  ::google::protobuf::int64 positionid() const;
  void set_positionid(::google::protobuf::int64 value);

  // double valueModifyParamA = 14;
  void clear_valuemodifyparama();
  static const int kValueModifyParamAFieldNumber = 14;
  double valuemodifyparama() const;
  void set_valuemodifyparama(double value);

  // double valueModifyParamT = 15;
  void clear_valuemodifyparamt();
  static const int kValueModifyParamTFieldNumber = 15;
  double valuemodifyparamt() const;
  void set_valuemodifyparamt(double value);

  // double valueModifyParamFactor = 16;
  void clear_valuemodifyparamfactor();
  static const int kValueModifyParamFactorFieldNumber = 16;
  double valuemodifyparamfactor() const;
  void set_valuemodifyparamfactor(double value);

  // int32 indexEnd = 10;
  void clear_indexend();
  static const int kIndexEndFieldNumber = 10;
  ::google::protobuf::int32 indexend() const;
  void set_indexend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.RecommendInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::RecommendItem > vecitem_;
  ::google::protobuf::internal::MapFieldLite<
      RecommendInfo_MapItemEntry_DoNotUse,
      ::google::protobuf::int64, ::so_rtrs::RecommendItem,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mapitem_;
  ::google::protobuf::internal::MapFieldLite<
      RecommendInfo_MapContextEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > mapcontext_;
  ::google::protobuf::internal::ArenaStringPtr scenesubalg_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::internal::ArenaStringPtr traceid_;
  ::google::protobuf::internal::ArenaStringPtr query_;
  ::google::protobuf::internal::ArenaStringPtr sceneinfo_;
  ::google::protobuf::internal::ArenaStringPtr positionidstr_;
  ::google::protobuf::internal::ArenaStringPtr word_seg_;
  ::so_rtrs::SceneSubAlgInfo* subalginfo_;
  int sceneid_;
  ::google::protobuf::int32 platformversion_;
  ::google::protobuf::int32 totalresult_;
  ::google::protobuf::int32 indexbegin_;
  ::google::protobuf::int64 positionid_;
  double valuemodifyparama_;
  double valuemodifyparamt_;
  double valuemodifyparamfactor_;
  ::google::protobuf::int32 indexend_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecomRequest_SceneInsulateContextEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecomRequest_SceneInsulateContextEntry_DoNotUse, 
    ::std::string, ::so_rtrs::SeviceSceneInsulateInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecomRequest_SceneInsulateContextEntry_DoNotUse, 
    ::std::string, ::so_rtrs::SeviceSceneInsulateInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RecomRequest_SceneInsulateContextEntry_DoNotUse();
  RecomRequest_SceneInsulateContextEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecomRequest_SceneInsulateContextEntry_DoNotUse& other);
  static const RecomRequest_SceneInsulateContextEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecomRequest_SceneInsulateContextEntry_DoNotUse*>(&_RecomRequest_SceneInsulateContextEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecomRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.RecomRequest) */ {
 public:
  RecomRequest();
  virtual ~RecomRequest();

  RecomRequest(const RecomRequest& from);

  inline RecomRequest& operator=(const RecomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecomRequest(RecomRequest&& from) noexcept
    : RecomRequest() {
    *this = ::std::move(from);
  }

  inline RecomRequest& operator=(RecomRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecomRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecomRequest* internal_default_instance() {
    return reinterpret_cast<const RecomRequest*>(
               &_RecomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(RecomRequest* other);
  friend void swap(RecomRequest& a, RecomRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecomRequest* New() const final {
    return CreateMaybeMessage<RecomRequest>(NULL);
  }

  RecomRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecomRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecomRequest& from);
  void MergeFrom(const RecomRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecomRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .so_rtrs.AlgMultiTestInfo vecTestInfo = 5;
  int vectestinfo_size() const;
  void clear_vectestinfo();
  static const int kVecTestInfoFieldNumber = 5;
  ::so_rtrs::AlgMultiTestInfo* mutable_vectestinfo(int index);
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
      mutable_vectestinfo();
  const ::so_rtrs::AlgMultiTestInfo& vectestinfo(int index) const;
  ::so_rtrs::AlgMultiTestInfo* add_vectestinfo();
  const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
      vectestinfo() const;

  // map<string, .so_rtrs.SeviceSceneInsulateInfo> sceneInsulateContext = 10;
  int sceneinsulatecontext_size() const;
  void clear_sceneinsulatecontext();
  static const int kSceneInsulateContextFieldNumber = 10;
  const ::google::protobuf::Map< ::std::string, ::so_rtrs::SeviceSceneInsulateInfo >&
      sceneinsulatecontext() const;
  ::google::protobuf::Map< ::std::string, ::so_rtrs::SeviceSceneInsulateInfo >*
      mutable_sceneinsulatecontext();

  // string reqId = 6;
  void clear_reqid();
  static const int kReqIdFieldNumber = 6;
  const ::std::string& reqid() const;
  void set_reqid(const ::std::string& value);
  #if LANG_CXX11
  void set_reqid(::std::string&& value);
  #endif
  void set_reqid(const char* value);
  void set_reqid(const char* value, size_t size);
  ::std::string* mutable_reqid();
  ::std::string* release_reqid();
  void set_allocated_reqid(::std::string* reqid);

  // string appKey = 8;
  void clear_appkey();
  static const int kAppKeyFieldNumber = 8;
  const ::std::string& appkey() const;
  void set_appkey(const ::std::string& value);
  #if LANG_CXX11
  void set_appkey(::std::string&& value);
  #endif
  void set_appkey(const char* value);
  void set_appkey(const char* value, size_t size);
  ::std::string* mutable_appkey();
  ::std::string* release_appkey();
  void set_allocated_appkey(::std::string* appkey);

  // .so_rtrs.DeviceInfo device = 1;
  bool has_device() const;
  void clear_device();
  static const int kDeviceFieldNumber = 1;
  private:
  const ::so_rtrs::DeviceInfo& _internal_device() const;
  public:
  const ::so_rtrs::DeviceInfo& device() const;
  ::so_rtrs::DeviceInfo* release_device();
  ::so_rtrs::DeviceInfo* mutable_device();
  void set_allocated_device(::so_rtrs::DeviceInfo* device);

  // .so_rtrs.LocationInfo location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  private:
  const ::so_rtrs::LocationInfo& _internal_location() const;
  public:
  const ::so_rtrs::LocationInfo& location() const;
  ::so_rtrs::LocationInfo* release_location();
  ::so_rtrs::LocationInfo* mutable_location();
  void set_allocated_location(::so_rtrs::LocationInfo* location);

  // .so_rtrs.NetworkInfo network = 3;
  bool has_network() const;
  void clear_network();
  static const int kNetworkFieldNumber = 3;
  private:
  const ::so_rtrs::NetworkInfo& _internal_network() const;
  public:
  const ::so_rtrs::NetworkInfo& network() const;
  ::so_rtrs::NetworkInfo* release_network();
  ::so_rtrs::NetworkInfo* mutable_network();
  void set_allocated_network(::so_rtrs::NetworkInfo* network);

  // .so_rtrs.RecommendInfo recommend = 4;
  bool has_recommend() const;
  void clear_recommend();
  static const int kRecommendFieldNumber = 4;
  private:
  const ::so_rtrs::RecommendInfo& _internal_recommend() const;
  public:
  const ::so_rtrs::RecommendInfo& recommend() const;
  ::so_rtrs::RecommendInfo* release_recommend();
  ::so_rtrs::RecommendInfo* mutable_recommend();
  void set_allocated_recommend(::so_rtrs::RecommendInfo* recommend);

  // int32 timeout = 7;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 7;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // bool need_debug = 9;
  void clear_need_debug();
  static const int kNeedDebugFieldNumber = 9;
  bool need_debug() const;
  void set_need_debug(bool value);

  // @@protoc_insertion_point(class_scope:so_rtrs.RecomRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo > vectestinfo_;
  ::google::protobuf::internal::MapFieldLite<
      RecomRequest_SceneInsulateContextEntry_DoNotUse,
      ::std::string, ::so_rtrs::SeviceSceneInsulateInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > sceneinsulatecontext_;
  ::google::protobuf::internal::ArenaStringPtr reqid_;
  ::google::protobuf::internal::ArenaStringPtr appkey_;
  ::so_rtrs::DeviceInfo* device_;
  ::so_rtrs::LocationInfo* location_;
  ::so_rtrs::NetworkInfo* network_;
  ::so_rtrs::RecommendInfo* recommend_;
  ::google::protobuf::int32 timeout_;
  bool need_debug_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecomResponse_DebugInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecomResponse_DebugInfoEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecomResponse_DebugInfoEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RecomResponse_DebugInfoEntry_DoNotUse();
  RecomResponse_DebugInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecomResponse_DebugInfoEntry_DoNotUse& other);
  static const RecomResponse_DebugInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecomResponse_DebugInfoEntry_DoNotUse*>(&_RecomResponse_DebugInfoEntry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecomResponse_DebugInfo2Entry_DoNotUse : public ::google::protobuf::internal::MapEntryLite<RecomResponse_DebugInfo2Entry_DoNotUse, 
    ::std::string, ::so_rtrs::RecomResponse,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntryLite<RecomResponse_DebugInfo2Entry_DoNotUse, 
    ::std::string, ::so_rtrs::RecomResponse,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RecomResponse_DebugInfo2Entry_DoNotUse();
  RecomResponse_DebugInfo2Entry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RecomResponse_DebugInfo2Entry_DoNotUse& other);
  static const RecomResponse_DebugInfo2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RecomResponse_DebugInfo2Entry_DoNotUse*>(&_RecomResponse_DebugInfo2Entry_DoNotUse_default_instance_); }
};

// -------------------------------------------------------------------

class RecomResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:so_rtrs.RecomResponse) */ {
 public:
  RecomResponse();
  virtual ~RecomResponse();

  RecomResponse(const RecomResponse& from);

  inline RecomResponse& operator=(const RecomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecomResponse(RecomResponse&& from) noexcept
    : RecomResponse() {
    *this = ::std::move(from);
  }

  inline RecomResponse& operator=(RecomResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const RecomResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecomResponse* internal_default_instance() {
    return reinterpret_cast<const RecomResponse*>(
               &_RecomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(RecomResponse* other);
  friend void swap(RecomResponse& a, RecomResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecomResponse* New() const final {
    return CreateMaybeMessage<RecomResponse>(NULL);
  }

  RecomResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecomResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const RecomResponse& from);
  void MergeFrom(const RecomResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecomResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> debug_info = 4;
  int debug_info_size() const;
  void clear_debug_info();
  static const int kDebugInfoFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      debug_info() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_debug_info();

  // map<string, .so_rtrs.RecomResponse> debug_info2 = 5;
  int debug_info2_size() const;
  void clear_debug_info2();
  static const int kDebugInfo2FieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, ::so_rtrs::RecomResponse >&
      debug_info2() const;
  ::google::protobuf::Map< ::std::string, ::so_rtrs::RecomResponse >*
      mutable_debug_info2();

  // string retStr = 2;
  void clear_retstr();
  static const int kRetStrFieldNumber = 2;
  const ::std::string& retstr() const;
  void set_retstr(const ::std::string& value);
  #if LANG_CXX11
  void set_retstr(::std::string&& value);
  #endif
  void set_retstr(const char* value);
  void set_retstr(const char* value, size_t size);
  ::std::string* mutable_retstr();
  ::std::string* release_retstr();
  void set_allocated_retstr(::std::string* retstr);

  // .so_rtrs.RecommendInfo recomInfo = 3;
  bool has_recominfo() const;
  void clear_recominfo();
  static const int kRecomInfoFieldNumber = 3;
  private:
  const ::so_rtrs::RecommendInfo& _internal_recominfo() const;
  public:
  const ::so_rtrs::RecommendInfo& recominfo() const;
  ::so_rtrs::RecommendInfo* release_recominfo();
  ::so_rtrs::RecommendInfo* mutable_recominfo();
  void set_allocated_recominfo(::so_rtrs::RecommendInfo* recominfo);

  // int32 ret = 1;
  void clear_ret();
  static const int kRetFieldNumber = 1;
  ::google::protobuf::int32 ret() const;
  void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:so_rtrs.RecomResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::MapFieldLite<
      RecomResponse_DebugInfoEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > debug_info_;
  ::google::protobuf::internal::MapFieldLite<
      RecomResponse_DebugInfo2Entry_DoNotUse,
      ::std::string, ::so_rtrs::RecomResponse,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > debug_info2_;
  ::google::protobuf::internal::ArenaStringPtr retstr_;
  ::so_rtrs::RecommendInfo* recominfo_;
  ::google::protobuf::int32 ret_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_recommend_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AllTestInfo

// repeated .so_rtrs.AlgMultiTestInfo vecTestInfo = 1;
inline int AllTestInfo::vectestinfo_size() const {
  return vectestinfo_.size();
}
inline ::so_rtrs::AlgMultiTestInfo* AllTestInfo::mutable_vectestinfo(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.AllTestInfo.vecTestInfo)
  return vectestinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
AllTestInfo::mutable_vectestinfo() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.AllTestInfo.vecTestInfo)
  return &vectestinfo_;
}
inline const ::so_rtrs::AlgMultiTestInfo& AllTestInfo::vectestinfo(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.AllTestInfo.vecTestInfo)
  return vectestinfo_.Get(index);
}
inline ::so_rtrs::AlgMultiTestInfo* AllTestInfo::add_vectestinfo() {
  // @@protoc_insertion_point(field_add:so_rtrs.AllTestInfo.vecTestInfo)
  return vectestinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
AllTestInfo::vectestinfo() const {
  // @@protoc_insertion_point(field_list:so_rtrs.AllTestInfo.vecTestInfo)
  return vectestinfo_;
}

// string debug_error = 2;
inline void AllTestInfo::clear_debug_error() {
  debug_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AllTestInfo::debug_error() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AllTestInfo.debug_error)
  return debug_error_.GetNoArena();
}
inline void AllTestInfo::set_debug_error(const ::std::string& value) {
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AllTestInfo.debug_error)
}
#if LANG_CXX11
inline void AllTestInfo::set_debug_error(::std::string&& value) {
  
  debug_error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AllTestInfo.debug_error)
}
#endif
inline void AllTestInfo::set_debug_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AllTestInfo.debug_error)
}
inline void AllTestInfo::set_debug_error(const char* value, size_t size) {
  
  debug_error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AllTestInfo.debug_error)
}
inline ::std::string* AllTestInfo::mutable_debug_error() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AllTestInfo.debug_error)
  return debug_error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AllTestInfo::release_debug_error() {
  // @@protoc_insertion_point(field_release:so_rtrs.AllTestInfo.debug_error)
  
  return debug_error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AllTestInfo::set_allocated_debug_error(::std::string* debug_error) {
  if (debug_error != NULL) {
    
  } else {
    
  }
  debug_error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_error);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AllTestInfo.debug_error)
}

// -------------------------------------------------------------------

// PredictorInfo

// string platform = 1;
inline void PredictorInfo::clear_platform() {
  platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PredictorInfo::platform() const {
  // @@protoc_insertion_point(field_get:so_rtrs.PredictorInfo.platform)
  return platform_.GetNoArena();
}
inline void PredictorInfo::set_platform(const ::std::string& value) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.PredictorInfo.platform)
}
#if LANG_CXX11
inline void PredictorInfo::set_platform(::std::string&& value) {
  
  platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.PredictorInfo.platform)
}
#endif
inline void PredictorInfo::set_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.PredictorInfo.platform)
}
inline void PredictorInfo::set_platform(const char* value, size_t size) {
  
  platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.PredictorInfo.platform)
}
inline ::std::string* PredictorInfo::mutable_platform() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.PredictorInfo.platform)
  return platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PredictorInfo::release_platform() {
  // @@protoc_insertion_point(field_release:so_rtrs.PredictorInfo.platform)
  
  return platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PredictorInfo::set_allocated_platform(::std::string* platform) {
  if (platform != NULL) {
    
  } else {
    
  }
  platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), platform);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.PredictorInfo.platform)
}

// string modelName = 2;
inline void PredictorInfo::clear_modelname() {
  modelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PredictorInfo::modelname() const {
  // @@protoc_insertion_point(field_get:so_rtrs.PredictorInfo.modelName)
  return modelname_.GetNoArena();
}
inline void PredictorInfo::set_modelname(const ::std::string& value) {
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.PredictorInfo.modelName)
}
#if LANG_CXX11
inline void PredictorInfo::set_modelname(::std::string&& value) {
  
  modelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.PredictorInfo.modelName)
}
#endif
inline void PredictorInfo::set_modelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.PredictorInfo.modelName)
}
inline void PredictorInfo::set_modelname(const char* value, size_t size) {
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.PredictorInfo.modelName)
}
inline ::std::string* PredictorInfo::mutable_modelname() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.PredictorInfo.modelName)
  return modelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PredictorInfo::release_modelname() {
  // @@protoc_insertion_point(field_release:so_rtrs.PredictorInfo.modelName)
  
  return modelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PredictorInfo::set_allocated_modelname(::std::string* modelname) {
  if (modelname != NULL) {
    
  } else {
    
  }
  modelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelname);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.PredictorInfo.modelName)
}

// double powerRatio = 3;
inline void PredictorInfo::clear_powerratio() {
  powerratio_ = 0;
}
inline double PredictorInfo::powerratio() const {
  // @@protoc_insertion_point(field_get:so_rtrs.PredictorInfo.powerRatio)
  return powerratio_;
}
inline void PredictorInfo::set_powerratio(double value) {
  
  powerratio_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.PredictorInfo.powerRatio)
}

// -------------------------------------------------------------------

// SceneSubAlgInfo

// repeated string rankAlgs = 1;
inline int SceneSubAlgInfo::rankalgs_size() const {
  return rankalgs_.size();
}
inline void SceneSubAlgInfo::clear_rankalgs() {
  rankalgs_.Clear();
}
inline const ::std::string& SceneSubAlgInfo::rankalgs(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.SceneSubAlgInfo.rankAlgs)
  return rankalgs_.Get(index);
}
inline ::std::string* SceneSubAlgInfo::mutable_rankalgs(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.SceneSubAlgInfo.rankAlgs)
  return rankalgs_.Mutable(index);
}
inline void SceneSubAlgInfo::set_rankalgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:so_rtrs.SceneSubAlgInfo.rankAlgs)
  rankalgs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SceneSubAlgInfo::set_rankalgs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:so_rtrs.SceneSubAlgInfo.rankAlgs)
  rankalgs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SceneSubAlgInfo::set_rankalgs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rankalgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
inline void SceneSubAlgInfo::set_rankalgs(int index, const char* value, size_t size) {
  rankalgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
inline ::std::string* SceneSubAlgInfo::add_rankalgs() {
  // @@protoc_insertion_point(field_add_mutable:so_rtrs.SceneSubAlgInfo.rankAlgs)
  return rankalgs_.Add();
}
inline void SceneSubAlgInfo::add_rankalgs(const ::std::string& value) {
  rankalgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
#if LANG_CXX11
inline void SceneSubAlgInfo::add_rankalgs(::std::string&& value) {
  rankalgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
#endif
inline void SceneSubAlgInfo::add_rankalgs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  rankalgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
inline void SceneSubAlgInfo::add_rankalgs(const char* value, size_t size) {
  rankalgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:so_rtrs.SceneSubAlgInfo.rankAlgs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SceneSubAlgInfo::rankalgs() const {
  // @@protoc_insertion_point(field_list:so_rtrs.SceneSubAlgInfo.rankAlgs)
  return rankalgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SceneSubAlgInfo::mutable_rankalgs() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.SceneSubAlgInfo.rankAlgs)
  return &rankalgs_;
}

// repeated string recallAlgs = 2;
inline int SceneSubAlgInfo::recallalgs_size() const {
  return recallalgs_.size();
}
inline void SceneSubAlgInfo::clear_recallalgs() {
  recallalgs_.Clear();
}
inline const ::std::string& SceneSubAlgInfo::recallalgs(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.SceneSubAlgInfo.recallAlgs)
  return recallalgs_.Get(index);
}
inline ::std::string* SceneSubAlgInfo::mutable_recallalgs(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.SceneSubAlgInfo.recallAlgs)
  return recallalgs_.Mutable(index);
}
inline void SceneSubAlgInfo::set_recallalgs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:so_rtrs.SceneSubAlgInfo.recallAlgs)
  recallalgs_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SceneSubAlgInfo::set_recallalgs(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:so_rtrs.SceneSubAlgInfo.recallAlgs)
  recallalgs_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SceneSubAlgInfo::set_recallalgs(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recallalgs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
inline void SceneSubAlgInfo::set_recallalgs(int index, const char* value, size_t size) {
  recallalgs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
inline ::std::string* SceneSubAlgInfo::add_recallalgs() {
  // @@protoc_insertion_point(field_add_mutable:so_rtrs.SceneSubAlgInfo.recallAlgs)
  return recallalgs_.Add();
}
inline void SceneSubAlgInfo::add_recallalgs(const ::std::string& value) {
  recallalgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
#if LANG_CXX11
inline void SceneSubAlgInfo::add_recallalgs(::std::string&& value) {
  recallalgs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
#endif
inline void SceneSubAlgInfo::add_recallalgs(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  recallalgs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
inline void SceneSubAlgInfo::add_recallalgs(const char* value, size_t size) {
  recallalgs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:so_rtrs.SceneSubAlgInfo.recallAlgs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SceneSubAlgInfo::recallalgs() const {
  // @@protoc_insertion_point(field_list:so_rtrs.SceneSubAlgInfo.recallAlgs)
  return recallalgs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SceneSubAlgInfo::mutable_recallalgs() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.SceneSubAlgInfo.recallAlgs)
  return &recallalgs_;
}

// repeated .so_rtrs.PredictorInfo predictors = 3;
inline int SceneSubAlgInfo::predictors_size() const {
  return predictors_.size();
}
inline void SceneSubAlgInfo::clear_predictors() {
  predictors_.Clear();
}
inline ::so_rtrs::PredictorInfo* SceneSubAlgInfo::mutable_predictors(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.SceneSubAlgInfo.predictors)
  return predictors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::PredictorInfo >*
SceneSubAlgInfo::mutable_predictors() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.SceneSubAlgInfo.predictors)
  return &predictors_;
}
inline const ::so_rtrs::PredictorInfo& SceneSubAlgInfo::predictors(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.SceneSubAlgInfo.predictors)
  return predictors_.Get(index);
}
inline ::so_rtrs::PredictorInfo* SceneSubAlgInfo::add_predictors() {
  // @@protoc_insertion_point(field_add:so_rtrs.SceneSubAlgInfo.predictors)
  return predictors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::PredictorInfo >&
SceneSubAlgInfo::predictors() const {
  // @@protoc_insertion_point(field_list:so_rtrs.SceneSubAlgInfo.predictors)
  return predictors_;
}

// -------------------------------------------------------------------

// SeviceSceneInsulateInfo

// bool isEffect = 1;
inline void SeviceSceneInsulateInfo::clear_iseffect() {
  iseffect_ = false;
}
inline bool SeviceSceneInsulateInfo::iseffect() const {
  // @@protoc_insertion_point(field_get:so_rtrs.SeviceSceneInsulateInfo.isEffect)
  return iseffect_;
}
inline void SeviceSceneInsulateInfo::set_iseffect(bool value) {
  
  iseffect_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.SeviceSceneInsulateInfo.isEffect)
}

// string serviceName = 2;
inline void SeviceSceneInsulateInfo::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeviceSceneInsulateInfo::servicename() const {
  // @@protoc_insertion_point(field_get:so_rtrs.SeviceSceneInsulateInfo.serviceName)
  return servicename_.GetNoArena();
}
inline void SeviceSceneInsulateInfo::set_servicename(const ::std::string& value) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.SeviceSceneInsulateInfo.serviceName)
}
#if LANG_CXX11
inline void SeviceSceneInsulateInfo::set_servicename(::std::string&& value) {
  
  servicename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.SeviceSceneInsulateInfo.serviceName)
}
#endif
inline void SeviceSceneInsulateInfo::set_servicename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.SeviceSceneInsulateInfo.serviceName)
}
inline void SeviceSceneInsulateInfo::set_servicename(const char* value, size_t size) {
  
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.SeviceSceneInsulateInfo.serviceName)
}
inline ::std::string* SeviceSceneInsulateInfo::mutable_servicename() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.SeviceSceneInsulateInfo.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeviceSceneInsulateInfo::release_servicename() {
  // @@protoc_insertion_point(field_release:so_rtrs.SeviceSceneInsulateInfo.serviceName)
  
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeviceSceneInsulateInfo::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    
  } else {
    
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.SeviceSceneInsulateInfo.serviceName)
}

// string serviceNameSuffix = 3;
inline void SeviceSceneInsulateInfo::clear_servicenamesuffix() {
  servicenamesuffix_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SeviceSceneInsulateInfo::servicenamesuffix() const {
  // @@protoc_insertion_point(field_get:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
  return servicenamesuffix_.GetNoArena();
}
inline void SeviceSceneInsulateInfo::set_servicenamesuffix(const ::std::string& value) {
  
  servicenamesuffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
}
#if LANG_CXX11
inline void SeviceSceneInsulateInfo::set_servicenamesuffix(::std::string&& value) {
  
  servicenamesuffix_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
}
#endif
inline void SeviceSceneInsulateInfo::set_servicenamesuffix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  servicenamesuffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
}
inline void SeviceSceneInsulateInfo::set_servicenamesuffix(const char* value, size_t size) {
  
  servicenamesuffix_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
}
inline ::std::string* SeviceSceneInsulateInfo::mutable_servicenamesuffix() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
  return servicenamesuffix_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SeviceSceneInsulateInfo::release_servicenamesuffix() {
  // @@protoc_insertion_point(field_release:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
  
  return servicenamesuffix_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SeviceSceneInsulateInfo::set_allocated_servicenamesuffix(::std::string* servicenamesuffix) {
  if (servicenamesuffix != NULL) {
    
  } else {
    
  }
  servicenamesuffix_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicenamesuffix);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.SeviceSceneInsulateInfo.serviceNameSuffix)
}

// -------------------------------------------------------------------

// DeviceInfo

// string androidId = 1;
inline void DeviceInfo::clear_androidid() {
  androidid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::androidid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.androidId)
  return androidid_.GetNoArena();
}
inline void DeviceInfo::set_androidid(const ::std::string& value) {
  
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.androidId)
}
#if LANG_CXX11
inline void DeviceInfo::set_androidid(::std::string&& value) {
  
  androidid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.androidId)
}
#endif
inline void DeviceInfo::set_androidid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.androidId)
}
inline void DeviceInfo::set_androidid(const char* value, size_t size) {
  
  androidid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.androidId)
}
inline ::std::string* DeviceInfo::mutable_androidid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.androidId)
  return androidid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_androidid() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.androidId)
  
  return androidid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_androidid(::std::string* androidid) {
  if (androidid != NULL) {
    
  } else {
    
  }
  androidid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), androidid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.androidId)
}

// string imei = 2;
inline void DeviceInfo::clear_imei() {
  imei_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::imei() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.imei)
  return imei_.GetNoArena();
}
inline void DeviceInfo::set_imei(const ::std::string& value) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.imei)
}
#if LANG_CXX11
inline void DeviceInfo::set_imei(::std::string&& value) {
  
  imei_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.imei)
}
#endif
inline void DeviceInfo::set_imei(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.imei)
}
inline void DeviceInfo::set_imei(const char* value, size_t size) {
  
  imei_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.imei)
}
inline ::std::string* DeviceInfo::mutable_imei() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.imei)
  return imei_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_imei() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.imei)
  
  return imei_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_imei(::std::string* imei) {
  if (imei != NULL) {
    
  } else {
    
  }
  imei_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imei);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.imei)
}

// int64 superUser = 3;
inline void DeviceInfo::clear_superuser() {
  superuser_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceInfo::superuser() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.superUser)
  return superuser_;
}
inline void DeviceInfo::set_superuser(::google::protobuf::int64 value) {
  
  superuser_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.superUser)
}

// string language = 4;
inline void DeviceInfo::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::language() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.language)
  return language_.GetNoArena();
}
inline void DeviceInfo::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.language)
}
#if LANG_CXX11
inline void DeviceInfo::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.language)
}
#endif
inline void DeviceInfo::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.language)
}
inline void DeviceInfo::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.language)
}
inline ::std::string* DeviceInfo::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_language() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.language)
}

// string manufacturer = 5;
inline void DeviceInfo::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void DeviceInfo::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.manufacturer)
}
#if LANG_CXX11
inline void DeviceInfo::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.manufacturer)
}
#endif
inline void DeviceInfo::set_manufacturer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.manufacturer)
}
inline void DeviceInfo::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.manufacturer)
}
inline ::std::string* DeviceInfo::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_manufacturer() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.manufacturer)
}

// string modelName = 6;
inline void DeviceInfo::clear_modelname() {
  modelname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::modelname() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.modelName)
  return modelname_.GetNoArena();
}
inline void DeviceInfo::set_modelname(const ::std::string& value) {
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.modelName)
}
#if LANG_CXX11
inline void DeviceInfo::set_modelname(::std::string&& value) {
  
  modelname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.modelName)
}
#endif
inline void DeviceInfo::set_modelname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.modelName)
}
inline void DeviceInfo::set_modelname(const char* value, size_t size) {
  
  modelname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.modelName)
}
inline ::std::string* DeviceInfo::mutable_modelname() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.modelName)
  return modelname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_modelname() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.modelName)
  
  return modelname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_modelname(::std::string* modelname) {
  if (modelname != NULL) {
    
  } else {
    
  }
  modelname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelname);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.modelName)
}

// string osVersion = 7;
inline void DeviceInfo::clear_osversion() {
  osversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::osversion() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.osVersion)
  return osversion_.GetNoArena();
}
inline void DeviceInfo::set_osversion(const ::std::string& value) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.osVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_osversion(::std::string&& value) {
  
  osversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.osVersion)
}
#endif
inline void DeviceInfo::set_osversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.osVersion)
}
inline void DeviceInfo::set_osversion(const char* value, size_t size) {
  
  osversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.osVersion)
}
inline ::std::string* DeviceInfo::mutable_osversion() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.osVersion)
  return osversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_osversion() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.osVersion)
  
  return osversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_osversion(::std::string* osversion) {
  if (osversion != NULL) {
    
  } else {
    
  }
  osversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), osversion);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.osVersion)
}

// string resolution = 8;
inline void DeviceInfo::clear_resolution() {
  resolution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::resolution() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.resolution)
  return resolution_.GetNoArena();
}
inline void DeviceInfo::set_resolution(const ::std::string& value) {
  
  resolution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.resolution)
}
#if LANG_CXX11
inline void DeviceInfo::set_resolution(::std::string&& value) {
  
  resolution_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.resolution)
}
#endif
inline void DeviceInfo::set_resolution(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resolution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.resolution)
}
inline void DeviceInfo::set_resolution(const char* value, size_t size) {
  
  resolution_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.resolution)
}
inline ::std::string* DeviceInfo::mutable_resolution() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.resolution)
  return resolution_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_resolution() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.resolution)
  
  return resolution_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_resolution(::std::string* resolution) {
  if (resolution != NULL) {
    
  } else {
    
  }
  resolution_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resolution);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.resolution)
}

// string macAddr = 9;
inline void DeviceInfo::clear_macaddr() {
  macaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::macaddr() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.macAddr)
  return macaddr_.GetNoArena();
}
inline void DeviceInfo::set_macaddr(const ::std::string& value) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.macAddr)
}
#if LANG_CXX11
inline void DeviceInfo::set_macaddr(::std::string&& value) {
  
  macaddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.macAddr)
}
#endif
inline void DeviceInfo::set_macaddr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.macAddr)
}
inline void DeviceInfo::set_macaddr(const char* value, size_t size) {
  
  macaddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.macAddr)
}
inline ::std::string* DeviceInfo::mutable_macaddr() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.macAddr)
  return macaddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_macaddr() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.macAddr)
  
  return macaddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_macaddr(::std::string* macaddr) {
  if (macaddr != NULL) {
    
  } else {
    
  }
  macaddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), macaddr);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.macAddr)
}

// string clientVersion = 10;
inline void DeviceInfo::clear_clientversion() {
  clientversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceInfo::clientversion() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.clientVersion)
  return clientversion_.GetNoArena();
}
inline void DeviceInfo::set_clientversion(const ::std::string& value) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.clientVersion)
}
#if LANG_CXX11
inline void DeviceInfo::set_clientversion(::std::string&& value) {
  
  clientversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.DeviceInfo.clientVersion)
}
#endif
inline void DeviceInfo::set_clientversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.DeviceInfo.clientVersion)
}
inline void DeviceInfo::set_clientversion(const char* value, size_t size) {
  
  clientversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.DeviceInfo.clientVersion)
}
inline ::std::string* DeviceInfo::mutable_clientversion() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.DeviceInfo.clientVersion)
  return clientversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceInfo::release_clientversion() {
  // @@protoc_insertion_point(field_release:so_rtrs.DeviceInfo.clientVersion)
  
  return clientversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_clientversion(::std::string* clientversion) {
  if (clientversion != NULL) {
    
  } else {
    
  }
  clientversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientversion);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.DeviceInfo.clientVersion)
}

// int64 addAttribute = 11;
inline void DeviceInfo::clear_addattribute() {
  addattribute_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DeviceInfo::addattribute() const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.addAttribute)
  return addattribute_;
}
inline void DeviceInfo::set_addattribute(::google::protobuf::int64 value) {
  
  addattribute_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.addAttribute)
}

// repeated int32 preferInfos = 12;
inline int DeviceInfo::preferinfos_size() const {
  return preferinfos_.size();
}
inline void DeviceInfo::clear_preferinfos() {
  preferinfos_.Clear();
}
inline ::google::protobuf::int32 DeviceInfo::preferinfos(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.DeviceInfo.preferInfos)
  return preferinfos_.Get(index);
}
inline void DeviceInfo::set_preferinfos(int index, ::google::protobuf::int32 value) {
  preferinfos_.Set(index, value);
  // @@protoc_insertion_point(field_set:so_rtrs.DeviceInfo.preferInfos)
}
inline void DeviceInfo::add_preferinfos(::google::protobuf::int32 value) {
  preferinfos_.Add(value);
  // @@protoc_insertion_point(field_add:so_rtrs.DeviceInfo.preferInfos)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
DeviceInfo::preferinfos() const {
  // @@protoc_insertion_point(field_list:so_rtrs.DeviceInfo.preferInfos)
  return preferinfos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
DeviceInfo::mutable_preferinfos() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.DeviceInfo.preferInfos)
  return &preferinfos_;
}

// -------------------------------------------------------------------

// LocationInfo

// string city = 1;
inline void LocationInfo::clear_city() {
  city_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::city() const {
  // @@protoc_insertion_point(field_get:so_rtrs.LocationInfo.city)
  return city_.GetNoArena();
}
inline void LocationInfo::set_city(const ::std::string& value) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.LocationInfo.city)
}
#if LANG_CXX11
inline void LocationInfo::set_city(::std::string&& value) {
  
  city_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.LocationInfo.city)
}
#endif
inline void LocationInfo::set_city(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.LocationInfo.city)
}
inline void LocationInfo::set_city(const char* value, size_t size) {
  
  city_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.LocationInfo.city)
}
inline ::std::string* LocationInfo::mutable_city() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.LocationInfo.city)
  return city_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_city() {
  // @@protoc_insertion_point(field_release:so_rtrs.LocationInfo.city)
  
  return city_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_city(::std::string* city) {
  if (city != NULL) {
    
  } else {
    
  }
  city_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.LocationInfo.city)
}

// string longitude = 2;
inline void LocationInfo::clear_longitude() {
  longitude_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::longitude() const {
  // @@protoc_insertion_point(field_get:so_rtrs.LocationInfo.longitude)
  return longitude_.GetNoArena();
}
inline void LocationInfo::set_longitude(const ::std::string& value) {
  
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.LocationInfo.longitude)
}
#if LANG_CXX11
inline void LocationInfo::set_longitude(::std::string&& value) {
  
  longitude_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.LocationInfo.longitude)
}
#endif
inline void LocationInfo::set_longitude(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.LocationInfo.longitude)
}
inline void LocationInfo::set_longitude(const char* value, size_t size) {
  
  longitude_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.LocationInfo.longitude)
}
inline ::std::string* LocationInfo::mutable_longitude() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.LocationInfo.longitude)
  return longitude_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_longitude() {
  // @@protoc_insertion_point(field_release:so_rtrs.LocationInfo.longitude)
  
  return longitude_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_longitude(::std::string* longitude) {
  if (longitude != NULL) {
    
  } else {
    
  }
  longitude_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), longitude);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.LocationInfo.longitude)
}

// string timezone = 3;
inline void LocationInfo::clear_timezone() {
  timezone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LocationInfo::timezone() const {
  // @@protoc_insertion_point(field_get:so_rtrs.LocationInfo.timezone)
  return timezone_.GetNoArena();
}
inline void LocationInfo::set_timezone(const ::std::string& value) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.LocationInfo.timezone)
}
#if LANG_CXX11
inline void LocationInfo::set_timezone(::std::string&& value) {
  
  timezone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.LocationInfo.timezone)
}
#endif
inline void LocationInfo::set_timezone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.LocationInfo.timezone)
}
inline void LocationInfo::set_timezone(const char* value, size_t size) {
  
  timezone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.LocationInfo.timezone)
}
inline ::std::string* LocationInfo::mutable_timezone() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.LocationInfo.timezone)
  return timezone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LocationInfo::release_timezone() {
  // @@protoc_insertion_point(field_release:so_rtrs.LocationInfo.timezone)
  
  return timezone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LocationInfo::set_allocated_timezone(::std::string* timezone) {
  if (timezone != NULL) {
    
  } else {
    
  }
  timezone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timezone);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.LocationInfo.timezone)
}

// -------------------------------------------------------------------

// NetworkInfo

// string imsi = 1;
inline void NetworkInfo::clear_imsi() {
  imsi_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::imsi() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.imsi)
  return imsi_.GetNoArena();
}
inline void NetworkInfo::set_imsi(const ::std::string& value) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.imsi)
}
#if LANG_CXX11
inline void NetworkInfo::set_imsi(::std::string&& value) {
  
  imsi_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.imsi)
}
#endif
inline void NetworkInfo::set_imsi(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.imsi)
}
inline void NetworkInfo::set_imsi(const char* value, size_t size) {
  
  imsi_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.imsi)
}
inline ::std::string* NetworkInfo::mutable_imsi() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.imsi)
  return imsi_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_imsi() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.imsi)
  
  return imsi_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_imsi(::std::string* imsi) {
  if (imsi != NULL) {
    
  } else {
    
  }
  imsi_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imsi);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.imsi)
}

// string networkType = 2;
inline void NetworkInfo::clear_networktype() {
  networktype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::networktype() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.networkType)
  return networktype_.GetNoArena();
}
inline void NetworkInfo::set_networktype(const ::std::string& value) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.networkType)
}
#if LANG_CXX11
inline void NetworkInfo::set_networktype(::std::string&& value) {
  
  networktype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.networkType)
}
#endif
inline void NetworkInfo::set_networktype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.networkType)
}
inline void NetworkInfo::set_networktype(const char* value, size_t size) {
  
  networktype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.networkType)
}
inline ::std::string* NetworkInfo::mutable_networktype() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.networkType)
  return networktype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_networktype() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.networkType)
  
  return networktype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_networktype(::std::string* networktype) {
  if (networktype != NULL) {
    
  } else {
    
  }
  networktype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networktype);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.networkType)
}

// string networkOperator = 3;
inline void NetworkInfo::clear_networkoperator() {
  networkoperator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::networkoperator() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.networkOperator)
  return networkoperator_.GetNoArena();
}
inline void NetworkInfo::set_networkoperator(const ::std::string& value) {
  
  networkoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.networkOperator)
}
#if LANG_CXX11
inline void NetworkInfo::set_networkoperator(::std::string&& value) {
  
  networkoperator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.networkOperator)
}
#endif
inline void NetworkInfo::set_networkoperator(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  networkoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.networkOperator)
}
inline void NetworkInfo::set_networkoperator(const char* value, size_t size) {
  
  networkoperator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.networkOperator)
}
inline ::std::string* NetworkInfo::mutable_networkoperator() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.networkOperator)
  return networkoperator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_networkoperator() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.networkOperator)
  
  return networkoperator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_networkoperator(::std::string* networkoperator) {
  if (networkoperator != NULL) {
    
  } else {
    
  }
  networkoperator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), networkoperator);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.networkOperator)
}

// string phoneNumber = 4;
inline void NetworkInfo::clear_phonenumber() {
  phonenumber_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::phonenumber() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.phoneNumber)
  return phonenumber_.GetNoArena();
}
inline void NetworkInfo::set_phonenumber(const ::std::string& value) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.phoneNumber)
}
#if LANG_CXX11
inline void NetworkInfo::set_phonenumber(::std::string&& value) {
  
  phonenumber_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.phoneNumber)
}
#endif
inline void NetworkInfo::set_phonenumber(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.phoneNumber)
}
inline void NetworkInfo::set_phonenumber(const char* value, size_t size) {
  
  phonenumber_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.phoneNumber)
}
inline ::std::string* NetworkInfo::mutable_phonenumber() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.phoneNumber)
  return phonenumber_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_phonenumber() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.phoneNumber)
  
  return phonenumber_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_phonenumber(::std::string* phonenumber) {
  if (phonenumber != NULL) {
    
  } else {
    
  }
  phonenumber_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phonenumber);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.phoneNumber)
}

// string clientIp = 5;
inline void NetworkInfo::clear_clientip() {
  clientip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::clientip() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.clientIp)
  return clientip_.GetNoArena();
}
inline void NetworkInfo::set_clientip(const ::std::string& value) {
  
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.clientIp)
}
#if LANG_CXX11
inline void NetworkInfo::set_clientip(::std::string&& value) {
  
  clientip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.clientIp)
}
#endif
inline void NetworkInfo::set_clientip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.clientIp)
}
inline void NetworkInfo::set_clientip(const char* value, size_t size) {
  
  clientip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.clientIp)
}
inline ::std::string* NetworkInfo::mutable_clientip() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.clientIp)
  return clientip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_clientip() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.clientIp)
  
  return clientip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_clientip(::std::string* clientip) {
  if (clientip != NULL) {
    
  } else {
    
  }
  clientip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientip);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.clientIp)
}

// string wifiSsid = 6;
inline void NetworkInfo::clear_wifissid() {
  wifissid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::wifissid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.wifiSsid)
  return wifissid_.GetNoArena();
}
inline void NetworkInfo::set_wifissid(const ::std::string& value) {
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.wifiSsid)
}
#if LANG_CXX11
inline void NetworkInfo::set_wifissid(::std::string&& value) {
  
  wifissid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.wifiSsid)
}
#endif
inline void NetworkInfo::set_wifissid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.wifiSsid)
}
inline void NetworkInfo::set_wifissid(const char* value, size_t size) {
  
  wifissid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.wifiSsid)
}
inline ::std::string* NetworkInfo::mutable_wifissid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.wifiSsid)
  return wifissid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_wifissid() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.wifiSsid)
  
  return wifissid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_wifissid(::std::string* wifissid) {
  if (wifissid != NULL) {
    
  } else {
    
  }
  wifissid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifissid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.wifiSsid)
}

// string wifiBssid = 7;
inline void NetworkInfo::clear_wifibssid() {
  wifibssid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkInfo::wifibssid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.NetworkInfo.wifiBssid)
  return wifibssid_.GetNoArena();
}
inline void NetworkInfo::set_wifibssid(const ::std::string& value) {
  
  wifibssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.NetworkInfo.wifiBssid)
}
#if LANG_CXX11
inline void NetworkInfo::set_wifibssid(::std::string&& value) {
  
  wifibssid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.NetworkInfo.wifiBssid)
}
#endif
inline void NetworkInfo::set_wifibssid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wifibssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.NetworkInfo.wifiBssid)
}
inline void NetworkInfo::set_wifibssid(const char* value, size_t size) {
  
  wifibssid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.NetworkInfo.wifiBssid)
}
inline ::std::string* NetworkInfo::mutable_wifibssid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.NetworkInfo.wifiBssid)
  return wifibssid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkInfo::release_wifibssid() {
  // @@protoc_insertion_point(field_release:so_rtrs.NetworkInfo.wifiBssid)
  
  return wifibssid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkInfo::set_allocated_wifibssid(::std::string* wifibssid) {
  if (wifibssid != NULL) {
    
  } else {
    
  }
  wifibssid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wifibssid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.NetworkInfo.wifiBssid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AdItemInfo

// string traceId = 1;
inline void AdItemInfo::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdItemInfo::traceid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.traceId)
  return traceid_.GetNoArena();
}
inline void AdItemInfo::set_traceid(const ::std::string& value) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.traceId)
}
#if LANG_CXX11
inline void AdItemInfo::set_traceid(::std::string&& value) {
  
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AdItemInfo.traceId)
}
#endif
inline void AdItemInfo::set_traceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AdItemInfo.traceId)
}
inline void AdItemInfo::set_traceid(const char* value, size_t size) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AdItemInfo.traceId)
}
inline ::std::string* AdItemInfo::mutable_traceid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AdItemInfo.traceId)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdItemInfo::release_traceid() {
  // @@protoc_insertion_point(field_release:so_rtrs.AdItemInfo.traceId)
  
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdItemInfo::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    
  } else {
    
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AdItemInfo.traceId)
}

// string adTxt = 2;
inline void AdItemInfo::clear_adtxt() {
  adtxt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdItemInfo::adtxt() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.adTxt)
  return adtxt_.GetNoArena();
}
inline void AdItemInfo::set_adtxt(const ::std::string& value) {
  
  adtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.adTxt)
}
#if LANG_CXX11
inline void AdItemInfo::set_adtxt(::std::string&& value) {
  
  adtxt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AdItemInfo.adTxt)
}
#endif
inline void AdItemInfo::set_adtxt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  adtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AdItemInfo.adTxt)
}
inline void AdItemInfo::set_adtxt(const char* value, size_t size) {
  
  adtxt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AdItemInfo.adTxt)
}
inline ::std::string* AdItemInfo::mutable_adtxt() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AdItemInfo.adTxt)
  return adtxt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdItemInfo::release_adtxt() {
  // @@protoc_insertion_point(field_release:so_rtrs.AdItemInfo.adTxt)
  
  return adtxt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdItemInfo::set_allocated_adtxt(::std::string* adtxt) {
  if (adtxt != NULL) {
    
  } else {
    
  }
  adtxt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adtxt);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AdItemInfo.adTxt)
}

// int32 adType = 3;
inline void AdItemInfo::clear_adtype() {
  adtype_ = 0;
}
inline ::google::protobuf::int32 AdItemInfo::adtype() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.adType)
  return adtype_;
}
inline void AdItemInfo::set_adtype(::google::protobuf::int32 value) {
  
  adtype_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.adType)
}

// int32 startTime = 4;
inline void AdItemInfo::clear_starttime() {
  starttime_ = 0;
}
inline ::google::protobuf::int32 AdItemInfo::starttime() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.startTime)
  return starttime_;
}
inline void AdItemInfo::set_starttime(::google::protobuf::int32 value) {
  
  starttime_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.startTime)
}

// int32 endTime = 5;
inline void AdItemInfo::clear_endtime() {
  endtime_ = 0;
}
inline ::google::protobuf::int32 AdItemInfo::endtime() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.endTime)
  return endtime_;
}
inline void AdItemInfo::set_endtime(::google::protobuf::int32 value) {
  
  endtime_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.endTime)
}

// double price = 6;
inline void AdItemInfo::clear_price() {
  price_ = 0;
}
inline double AdItemInfo::price() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.price)
  return price_;
}
inline void AdItemInfo::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.price)
}

// int32 costType = 7;
inline void AdItemInfo::clear_costtype() {
  costtype_ = 0;
}
inline ::google::protobuf::int32 AdItemInfo::costtype() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.costType)
  return costtype_;
}
inline void AdItemInfo::set_costtype(::google::protobuf::int32 value) {
  
  costtype_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.costType)
}

// map<string, string> ideaMap = 8;
inline int AdItemInfo::ideamap_size() const {
  return ideamap_.size();
}
inline void AdItemInfo::clear_ideamap() {
  ideamap_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
AdItemInfo::ideamap() const {
  // @@protoc_insertion_point(field_map:so_rtrs.AdItemInfo.ideaMap)
  return ideamap_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
AdItemInfo::mutable_ideamap() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.AdItemInfo.ideaMap)
  return ideamap_.MutableMap();
}

// string currentIdea = 9;
inline void AdItemInfo::clear_currentidea() {
  currentidea_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AdItemInfo::currentidea() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.currentIdea)
  return currentidea_.GetNoArena();
}
inline void AdItemInfo::set_currentidea(const ::std::string& value) {
  
  currentidea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.currentIdea)
}
#if LANG_CXX11
inline void AdItemInfo::set_currentidea(::std::string&& value) {
  
  currentidea_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.AdItemInfo.currentIdea)
}
#endif
inline void AdItemInfo::set_currentidea(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  currentidea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.AdItemInfo.currentIdea)
}
inline void AdItemInfo::set_currentidea(const char* value, size_t size) {
  
  currentidea_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.AdItemInfo.currentIdea)
}
inline ::std::string* AdItemInfo::mutable_currentidea() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.AdItemInfo.currentIdea)
  return currentidea_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AdItemInfo::release_currentidea() {
  // @@protoc_insertion_point(field_release:so_rtrs.AdItemInfo.currentIdea)
  
  return currentidea_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AdItemInfo::set_allocated_currentidea(::std::string* currentidea) {
  if (currentidea != NULL) {
    
  } else {
    
  }
  currentidea_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), currentidea);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.AdItemInfo.currentIdea)
}

// int32 pricingType = 10;
inline void AdItemInfo::clear_pricingtype() {
  pricingtype_ = 0;
}
inline ::google::protobuf::int32 AdItemInfo::pricingtype() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.pricingType)
  return pricingtype_;
}
inline void AdItemInfo::set_pricingtype(::google::protobuf::int32 value) {
  
  pricingtype_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.pricingType)
}

// int64 creativeid = 11;
inline void AdItemInfo::clear_creativeid() {
  creativeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AdItemInfo::creativeid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AdItemInfo.creativeid)
  return creativeid_;
}
inline void AdItemInfo::set_creativeid(::google::protobuf::int64 value) {
  
  creativeid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AdItemInfo.creativeid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecommendItem

// int64 id = 1;
inline void RecommendItem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecommendItem::id() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.id)
  return id_;
}
inline void RecommendItem::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.id)
}

// double score = 2;
inline void RecommendItem::clear_score() {
  score_ = 0;
}
inline double RecommendItem::score() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.score)
  return score_;
}
inline void RecommendItem::set_score(double value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.score)
}

// string recomReason = 3;
inline void RecommendItem::clear_recomreason() {
  recomreason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendItem::recomreason() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.recomReason)
  return recomreason_.GetNoArena();
}
inline void RecommendItem::set_recomreason(const ::std::string& value) {
  
  recomreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.recomReason)
}
#if LANG_CXX11
inline void RecommendItem::set_recomreason(::std::string&& value) {
  
  recomreason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendItem.recomReason)
}
#endif
inline void RecommendItem::set_recomreason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  recomreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendItem.recomReason)
}
inline void RecommendItem::set_recomreason(const char* value, size_t size) {
  
  recomreason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendItem.recomReason)
}
inline ::std::string* RecommendItem::mutable_recomreason() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendItem.recomReason)
  return recomreason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendItem::release_recomreason() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendItem.recomReason)
  
  return recomreason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendItem::set_allocated_recomreason(::std::string* recomreason) {
  if (recomreason != NULL) {
    
  } else {
    
  }
  recomreason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recomreason);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendItem.recomReason)
}

// int32 versionCode = 4;
inline void RecommendItem::clear_versioncode() {
  versioncode_ = 0;
}
inline ::google::protobuf::int32 RecommendItem::versioncode() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.versionCode)
  return versioncode_;
}
inline void RecommendItem::set_versioncode(::google::protobuf::int32 value) {
  
  versioncode_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.versionCode)
}

// .so_rtrs.AdItemInfo adInfo = 5;
inline bool RecommendItem::has_adinfo() const {
  return this != internal_default_instance() && adinfo_ != NULL;
}
inline void RecommendItem::clear_adinfo() {
  if (GetArenaNoVirtual() == NULL && adinfo_ != NULL) {
    delete adinfo_;
  }
  adinfo_ = NULL;
}
inline const ::so_rtrs::AdItemInfo& RecommendItem::_internal_adinfo() const {
  return *adinfo_;
}
inline const ::so_rtrs::AdItemInfo& RecommendItem::adinfo() const {
  const ::so_rtrs::AdItemInfo* p = adinfo_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.adInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::AdItemInfo*>(
      &::so_rtrs::_AdItemInfo_default_instance_);
}
inline ::so_rtrs::AdItemInfo* RecommendItem::release_adinfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendItem.adInfo)
  
  ::so_rtrs::AdItemInfo* temp = adinfo_;
  adinfo_ = NULL;
  return temp;
}
inline ::so_rtrs::AdItemInfo* RecommendItem::mutable_adinfo() {
  
  if (adinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::AdItemInfo>(GetArenaNoVirtual());
    adinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendItem.adInfo)
  return adinfo_;
}
inline void RecommendItem::set_allocated_adinfo(::so_rtrs::AdItemInfo* adinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete adinfo_;
  }
  if (adinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      adinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, adinfo, submessage_arena);
    }
    
  } else {
    
  }
  adinfo_ = adinfo;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendItem.adInfo)
}

// double cvr = 6;
inline void RecommendItem::clear_cvr() {
  cvr_ = 0;
}
inline double RecommendItem::cvr() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.cvr)
  return cvr_;
}
inline void RecommendItem::set_cvr(double value) {
  
  cvr_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.cvr)
}

// string traceId = 7;
inline void RecommendItem::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendItem::traceid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.traceId)
  return traceid_.GetNoArena();
}
inline void RecommendItem::set_traceid(const ::std::string& value) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.traceId)
}
#if LANG_CXX11
inline void RecommendItem::set_traceid(::std::string&& value) {
  
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendItem.traceId)
}
#endif
inline void RecommendItem::set_traceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendItem.traceId)
}
inline void RecommendItem::set_traceid(const char* value, size_t size) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendItem.traceId)
}
inline ::std::string* RecommendItem::mutable_traceid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendItem.traceId)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendItem::release_traceid() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendItem.traceId)
  
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendItem::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    
  } else {
    
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendItem.traceId)
}

// string strId = 8;
inline void RecommendItem::clear_strid() {
  strid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendItem::strid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.strId)
  return strid_.GetNoArena();
}
inline void RecommendItem::set_strid(const ::std::string& value) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.strId)
}
#if LANG_CXX11
inline void RecommendItem::set_strid(::std::string&& value) {
  
  strid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendItem.strId)
}
#endif
inline void RecommendItem::set_strid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendItem.strId)
}
inline void RecommendItem::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendItem.strId)
}
inline ::std::string* RecommendItem::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendItem.strId)
  return strid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendItem::release_strid() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendItem.strId)
  
  return strid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendItem::set_allocated_strid(::std::string* strid) {
  if (strid != NULL) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendItem.strId)
}

// string appname = 9;
inline void RecommendItem::clear_appname() {
  appname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendItem::appname() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendItem.appname)
  return appname_.GetNoArena();
}
inline void RecommendItem::set_appname(const ::std::string& value) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendItem.appname)
}
#if LANG_CXX11
inline void RecommendItem::set_appname(::std::string&& value) {
  
  appname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendItem.appname)
}
#endif
inline void RecommendItem::set_appname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendItem.appname)
}
inline void RecommendItem::set_appname(const char* value, size_t size) {
  
  appname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendItem.appname)
}
inline ::std::string* RecommendItem::mutable_appname() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendItem.appname)
  return appname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendItem::release_appname() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendItem.appname)
  
  return appname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendItem::set_allocated_appname(::std::string* appname) {
  if (appname != NULL) {
    
  } else {
    
  }
  appname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appname);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendItem.appname)
}

// map<string, string> mapContext = 10;
inline int RecommendItem::mapcontext_size() const {
  return mapcontext_.size();
}
inline void RecommendItem::clear_mapcontext() {
  mapcontext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RecommendItem::mapcontext() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecommendItem.mapContext)
  return mapcontext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RecommendItem::mutable_mapcontext() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecommendItem.mapContext)
  return mapcontext_.MutableMap();
}

// -------------------------------------------------------------------

// Interval

// double lowerLimit = 1;
inline void Interval::clear_lowerlimit() {
  lowerlimit_ = 0;
}
inline double Interval::lowerlimit() const {
  // @@protoc_insertion_point(field_get:so_rtrs.Interval.lowerLimit)
  return lowerlimit_;
}
inline void Interval::set_lowerlimit(double value) {
  
  lowerlimit_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.Interval.lowerLimit)
}

// double upperLimit = 2;
inline void Interval::clear_upperlimit() {
  upperlimit_ = 0;
}
inline double Interval::upperlimit() const {
  // @@protoc_insertion_point(field_get:so_rtrs.Interval.upperLimit)
  return upperlimit_;
}
inline void Interval::set_upperlimit(double value) {
  
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.Interval.upperLimit)
}

// -------------------------------------------------------------------

// AgeSexInfo

// bool isIncludeAge = 1;
inline void AgeSexInfo::clear_isincludeage() {
  isincludeage_ = false;
}
inline bool AgeSexInfo::isincludeage() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AgeSexInfo.isIncludeAge)
  return isincludeage_;
}
inline void AgeSexInfo::set_isincludeage(bool value) {
  
  isincludeage_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AgeSexInfo.isIncludeAge)
}

// repeated .so_rtrs.Interval ageInterval = 2;
inline int AgeSexInfo::ageinterval_size() const {
  return ageinterval_.size();
}
inline void AgeSexInfo::clear_ageinterval() {
  ageinterval_.Clear();
}
inline ::so_rtrs::Interval* AgeSexInfo::mutable_ageinterval(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.AgeSexInfo.ageInterval)
  return ageinterval_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >*
AgeSexInfo::mutable_ageinterval() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.AgeSexInfo.ageInterval)
  return &ageinterval_;
}
inline const ::so_rtrs::Interval& AgeSexInfo::ageinterval(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.AgeSexInfo.ageInterval)
  return ageinterval_.Get(index);
}
inline ::so_rtrs::Interval* AgeSexInfo::add_ageinterval() {
  // @@protoc_insertion_point(field_add:so_rtrs.AgeSexInfo.ageInterval)
  return ageinterval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >&
AgeSexInfo::ageinterval() const {
  // @@protoc_insertion_point(field_list:so_rtrs.AgeSexInfo.ageInterval)
  return ageinterval_;
}

// bool isIncludeSex = 3;
inline void AgeSexInfo::clear_isincludesex() {
  isincludesex_ = false;
}
inline bool AgeSexInfo::isincludesex() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AgeSexInfo.isIncludeSex)
  return isincludesex_;
}
inline void AgeSexInfo::set_isincludesex(bool value) {
  
  isincludesex_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AgeSexInfo.isIncludeSex)
}

// int32 sex = 4;
inline void AgeSexInfo::clear_sex() {
  sex_ = 0;
}
inline ::google::protobuf::int32 AgeSexInfo::sex() const {
  // @@protoc_insertion_point(field_get:so_rtrs.AgeSexInfo.sex)
  return sex_;
}
inline void AgeSexInfo::set_sex(::google::protobuf::int32 value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.AgeSexInfo.sex)
}

// -------------------------------------------------------------------

// IncomeCityInfo

// bool isIncludeIncome = 1;
inline void IncomeCityInfo::clear_isincludeincome() {
  isincludeincome_ = false;
}
inline bool IncomeCityInfo::isincludeincome() const {
  // @@protoc_insertion_point(field_get:so_rtrs.IncomeCityInfo.isIncludeIncome)
  return isincludeincome_;
}
inline void IncomeCityInfo::set_isincludeincome(bool value) {
  
  isincludeincome_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.IncomeCityInfo.isIncludeIncome)
}

// repeated .so_rtrs.Interval incomeInterval = 2;
inline int IncomeCityInfo::incomeinterval_size() const {
  return incomeinterval_.size();
}
inline void IncomeCityInfo::clear_incomeinterval() {
  incomeinterval_.Clear();
}
inline ::so_rtrs::Interval* IncomeCityInfo::mutable_incomeinterval(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.IncomeCityInfo.incomeInterval)
  return incomeinterval_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >*
IncomeCityInfo::mutable_incomeinterval() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.IncomeCityInfo.incomeInterval)
  return &incomeinterval_;
}
inline const ::so_rtrs::Interval& IncomeCityInfo::incomeinterval(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.IncomeCityInfo.incomeInterval)
  return incomeinterval_.Get(index);
}
inline ::so_rtrs::Interval* IncomeCityInfo::add_incomeinterval() {
  // @@protoc_insertion_point(field_add:so_rtrs.IncomeCityInfo.incomeInterval)
  return incomeinterval_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::Interval >&
IncomeCityInfo::incomeinterval() const {
  // @@protoc_insertion_point(field_list:so_rtrs.IncomeCityInfo.incomeInterval)
  return incomeinterval_;
}

// bool isIncludeCity = 3;
inline void IncomeCityInfo::clear_isincludecity() {
  isincludecity_ = false;
}
inline bool IncomeCityInfo::isincludecity() const {
  // @@protoc_insertion_point(field_get:so_rtrs.IncomeCityInfo.isIncludeCity)
  return isincludecity_;
}
inline void IncomeCityInfo::set_isincludecity(bool value) {
  
  isincludecity_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.IncomeCityInfo.isIncludeCity)
}

// repeated uint32 vecCityId = 4;
inline int IncomeCityInfo::veccityid_size() const {
  return veccityid_.size();
}
inline void IncomeCityInfo::clear_veccityid() {
  veccityid_.Clear();
}
inline ::google::protobuf::uint32 IncomeCityInfo::veccityid(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.IncomeCityInfo.vecCityId)
  return veccityid_.Get(index);
}
inline void IncomeCityInfo::set_veccityid(int index, ::google::protobuf::uint32 value) {
  veccityid_.Set(index, value);
  // @@protoc_insertion_point(field_set:so_rtrs.IncomeCityInfo.vecCityId)
}
inline void IncomeCityInfo::add_veccityid(::google::protobuf::uint32 value) {
  veccityid_.Add(value);
  // @@protoc_insertion_point(field_add:so_rtrs.IncomeCityInfo.vecCityId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IncomeCityInfo::veccityid() const {
  // @@protoc_insertion_point(field_list:so_rtrs.IncomeCityInfo.vecCityId)
  return veccityid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IncomeCityInfo::mutable_veccityid() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.IncomeCityInfo.vecCityId)
  return &veccityid_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RuleAppDirectInfo

// map<uint32, double> mapTagInfo = 1;
inline int RuleAppDirectInfo::maptaginfo_size() const {
  return maptaginfo_.size();
}
inline void RuleAppDirectInfo::clear_maptaginfo() {
  maptaginfo_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, double >&
RuleAppDirectInfo::maptaginfo() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RuleAppDirectInfo.mapTagInfo)
  return maptaginfo_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, double >*
RuleAppDirectInfo::mutable_maptaginfo() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RuleAppDirectInfo.mapTagInfo)
  return maptaginfo_.MutableMap();
}

// double exposePercent = 2;
inline void RuleAppDirectInfo::clear_exposepercent() {
  exposepercent_ = 0;
}
inline double RuleAppDirectInfo::exposepercent() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RuleAppDirectInfo.exposePercent)
  return exposepercent_;
}
inline void RuleAppDirectInfo::set_exposepercent(double value) {
  
  exposepercent_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RuleAppDirectInfo.exposePercent)
}

// repeated uint32 vecInstallAppIdKai = 3;
inline int RuleAppDirectInfo::vecinstallappidkai_size() const {
  return vecinstallappidkai_.size();
}
inline void RuleAppDirectInfo::clear_vecinstallappidkai() {
  vecinstallappidkai_.Clear();
}
inline ::google::protobuf::uint32 RuleAppDirectInfo::vecinstallappidkai(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.RuleAppDirectInfo.vecInstallAppIdKai)
  return vecinstallappidkai_.Get(index);
}
inline void RuleAppDirectInfo::set_vecinstallappidkai(int index, ::google::protobuf::uint32 value) {
  vecinstallappidkai_.Set(index, value);
  // @@protoc_insertion_point(field_set:so_rtrs.RuleAppDirectInfo.vecInstallAppIdKai)
}
inline void RuleAppDirectInfo::add_vecinstallappidkai(::google::protobuf::uint32 value) {
  vecinstallappidkai_.Add(value);
  // @@protoc_insertion_point(field_add:so_rtrs.RuleAppDirectInfo.vecInstallAppIdKai)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RuleAppDirectInfo::vecinstallappidkai() const {
  // @@protoc_insertion_point(field_list:so_rtrs.RuleAppDirectInfo.vecInstallAppIdKai)
  return vecinstallappidkai_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RuleAppDirectInfo::mutable_vecinstallappidkai() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.RuleAppDirectInfo.vecInstallAppIdKai)
  return &vecinstallappidkai_;
}

// repeated uint32 vecUnInstallAppIdKai = 4;
inline int RuleAppDirectInfo::vecuninstallappidkai_size() const {
  return vecuninstallappidkai_.size();
}
inline void RuleAppDirectInfo::clear_vecuninstallappidkai() {
  vecuninstallappidkai_.Clear();
}
inline ::google::protobuf::uint32 RuleAppDirectInfo::vecuninstallappidkai(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.RuleAppDirectInfo.vecUnInstallAppIdKai)
  return vecuninstallappidkai_.Get(index);
}
inline void RuleAppDirectInfo::set_vecuninstallappidkai(int index, ::google::protobuf::uint32 value) {
  vecuninstallappidkai_.Set(index, value);
  // @@protoc_insertion_point(field_set:so_rtrs.RuleAppDirectInfo.vecUnInstallAppIdKai)
}
inline void RuleAppDirectInfo::add_vecuninstallappidkai(::google::protobuf::uint32 value) {
  vecuninstallappidkai_.Add(value);
  // @@protoc_insertion_point(field_add:so_rtrs.RuleAppDirectInfo.vecUnInstallAppIdKai)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RuleAppDirectInfo::vecuninstallappidkai() const {
  // @@protoc_insertion_point(field_list:so_rtrs.RuleAppDirectInfo.vecUnInstallAppIdKai)
  return vecuninstallappidkai_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RuleAppDirectInfo::mutable_vecuninstallappidkai() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.RuleAppDirectInfo.vecUnInstallAppIdKai)
  return &vecuninstallappidkai_;
}

// .so_rtrs.AgeSexInfo ageSexInfo = 5;
inline bool RuleAppDirectInfo::has_agesexinfo() const {
  return this != internal_default_instance() && agesexinfo_ != NULL;
}
inline void RuleAppDirectInfo::clear_agesexinfo() {
  if (GetArenaNoVirtual() == NULL && agesexinfo_ != NULL) {
    delete agesexinfo_;
  }
  agesexinfo_ = NULL;
}
inline const ::so_rtrs::AgeSexInfo& RuleAppDirectInfo::_internal_agesexinfo() const {
  return *agesexinfo_;
}
inline const ::so_rtrs::AgeSexInfo& RuleAppDirectInfo::agesexinfo() const {
  const ::so_rtrs::AgeSexInfo* p = agesexinfo_;
  // @@protoc_insertion_point(field_get:so_rtrs.RuleAppDirectInfo.ageSexInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::AgeSexInfo*>(
      &::so_rtrs::_AgeSexInfo_default_instance_);
}
inline ::so_rtrs::AgeSexInfo* RuleAppDirectInfo::release_agesexinfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RuleAppDirectInfo.ageSexInfo)
  
  ::so_rtrs::AgeSexInfo* temp = agesexinfo_;
  agesexinfo_ = NULL;
  return temp;
}
inline ::so_rtrs::AgeSexInfo* RuleAppDirectInfo::mutable_agesexinfo() {
  
  if (agesexinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::AgeSexInfo>(GetArenaNoVirtual());
    agesexinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RuleAppDirectInfo.ageSexInfo)
  return agesexinfo_;
}
inline void RuleAppDirectInfo::set_allocated_agesexinfo(::so_rtrs::AgeSexInfo* agesexinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete agesexinfo_;
  }
  if (agesexinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      agesexinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, agesexinfo, submessage_arena);
    }
    
  } else {
    
  }
  agesexinfo_ = agesexinfo;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RuleAppDirectInfo.ageSexInfo)
}

// .so_rtrs.IncomeCityInfo incomeCityInfo = 6;
inline bool RuleAppDirectInfo::has_incomecityinfo() const {
  return this != internal_default_instance() && incomecityinfo_ != NULL;
}
inline void RuleAppDirectInfo::clear_incomecityinfo() {
  if (GetArenaNoVirtual() == NULL && incomecityinfo_ != NULL) {
    delete incomecityinfo_;
  }
  incomecityinfo_ = NULL;
}
inline const ::so_rtrs::IncomeCityInfo& RuleAppDirectInfo::_internal_incomecityinfo() const {
  return *incomecityinfo_;
}
inline const ::so_rtrs::IncomeCityInfo& RuleAppDirectInfo::incomecityinfo() const {
  const ::so_rtrs::IncomeCityInfo* p = incomecityinfo_;
  // @@protoc_insertion_point(field_get:so_rtrs.RuleAppDirectInfo.incomeCityInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::IncomeCityInfo*>(
      &::so_rtrs::_IncomeCityInfo_default_instance_);
}
inline ::so_rtrs::IncomeCityInfo* RuleAppDirectInfo::release_incomecityinfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RuleAppDirectInfo.incomeCityInfo)
  
  ::so_rtrs::IncomeCityInfo* temp = incomecityinfo_;
  incomecityinfo_ = NULL;
  return temp;
}
inline ::so_rtrs::IncomeCityInfo* RuleAppDirectInfo::mutable_incomecityinfo() {
  
  if (incomecityinfo_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::IncomeCityInfo>(GetArenaNoVirtual());
    incomecityinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RuleAppDirectInfo.incomeCityInfo)
  return incomecityinfo_;
}
inline void RuleAppDirectInfo::set_allocated_incomecityinfo(::so_rtrs::IncomeCityInfo* incomecityinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete incomecityinfo_;
  }
  if (incomecityinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      incomecityinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, incomecityinfo, submessage_arena);
    }
    
  } else {
    
  }
  incomecityinfo_ = incomecityinfo;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RuleAppDirectInfo.incomeCityInfo)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecommendInfo

// .so_rtrs.SCENE_CMD_ID sceneId = 1;
inline void RecommendInfo::clear_sceneid() {
  sceneid_ = 0;
}
inline ::so_rtrs::SCENE_CMD_ID RecommendInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.sceneId)
  return static_cast< ::so_rtrs::SCENE_CMD_ID >(sceneid_);
}
inline void RecommendInfo::set_sceneid(::so_rtrs::SCENE_CMD_ID value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.sceneId)
}

// string sceneSubAlg = 2;
inline void RecommendInfo::clear_scenesubalg() {
  scenesubalg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::scenesubalg() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.sceneSubAlg)
  return scenesubalg_.GetNoArena();
}
inline void RecommendInfo::set_scenesubalg(const ::std::string& value) {
  
  scenesubalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.sceneSubAlg)
}
#if LANG_CXX11
inline void RecommendInfo::set_scenesubalg(::std::string&& value) {
  
  scenesubalg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.sceneSubAlg)
}
#endif
inline void RecommendInfo::set_scenesubalg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scenesubalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.sceneSubAlg)
}
inline void RecommendInfo::set_scenesubalg(const char* value, size_t size) {
  
  scenesubalg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.sceneSubAlg)
}
inline ::std::string* RecommendInfo::mutable_scenesubalg() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.sceneSubAlg)
  return scenesubalg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_scenesubalg() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.sceneSubAlg)
  
  return scenesubalg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_scenesubalg(::std::string* scenesubalg) {
  if (scenesubalg != NULL) {
    
  } else {
    
  }
  scenesubalg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scenesubalg);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.sceneSubAlg)
}

// string context = 3;
inline void RecommendInfo::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::context() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.context)
  return context_.GetNoArena();
}
inline void RecommendInfo::set_context(const ::std::string& value) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.context)
}
#if LANG_CXX11
inline void RecommendInfo::set_context(::std::string&& value) {
  
  context_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.context)
}
#endif
inline void RecommendInfo::set_context(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.context)
}
inline void RecommendInfo::set_context(const char* value, size_t size) {
  
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.context)
}
inline ::std::string* RecommendInfo::mutable_context() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_context() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.context)
  
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    
  } else {
    
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.context)
}

// int32 platformVersion = 4;
inline void RecommendInfo::clear_platformversion() {
  platformversion_ = 0;
}
inline ::google::protobuf::int32 RecommendInfo::platformversion() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.platformVersion)
  return platformversion_;
}
inline void RecommendInfo::set_platformversion(::google::protobuf::int32 value) {
  
  platformversion_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.platformVersion)
}

// repeated .so_rtrs.RecommendItem vecItem = 5;
inline int RecommendInfo::vecitem_size() const {
  return vecitem_.size();
}
inline void RecommendInfo::clear_vecitem() {
  vecitem_.Clear();
}
inline ::so_rtrs::RecommendItem* RecommendInfo::mutable_vecitem(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.vecItem)
  return vecitem_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::RecommendItem >*
RecommendInfo::mutable_vecitem() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.RecommendInfo.vecItem)
  return &vecitem_;
}
inline const ::so_rtrs::RecommendItem& RecommendInfo::vecitem(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.vecItem)
  return vecitem_.Get(index);
}
inline ::so_rtrs::RecommendItem* RecommendInfo::add_vecitem() {
  // @@protoc_insertion_point(field_add:so_rtrs.RecommendInfo.vecItem)
  return vecitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::RecommendItem >&
RecommendInfo::vecitem() const {
  // @@protoc_insertion_point(field_list:so_rtrs.RecommendInfo.vecItem)
  return vecitem_;
}

// map<int64, .so_rtrs.RecommendItem> mapItem = 6;
inline int RecommendInfo::mapitem_size() const {
  return mapitem_.size();
}
inline void RecommendInfo::clear_mapitem() {
  mapitem_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int64, ::so_rtrs::RecommendItem >&
RecommendInfo::mapitem() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecommendInfo.mapItem)
  return mapitem_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int64, ::so_rtrs::RecommendItem >*
RecommendInfo::mutable_mapitem() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecommendInfo.mapItem)
  return mapitem_.MutableMap();
}

// string traceId = 7;
inline void RecommendInfo::clear_traceid() {
  traceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::traceid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.traceId)
  return traceid_.GetNoArena();
}
inline void RecommendInfo::set_traceid(const ::std::string& value) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.traceId)
}
#if LANG_CXX11
inline void RecommendInfo::set_traceid(::std::string&& value) {
  
  traceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.traceId)
}
#endif
inline void RecommendInfo::set_traceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.traceId)
}
inline void RecommendInfo::set_traceid(const char* value, size_t size) {
  
  traceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.traceId)
}
inline ::std::string* RecommendInfo::mutable_traceid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.traceId)
  return traceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_traceid() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.traceId)
  
  return traceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_traceid(::std::string* traceid) {
  if (traceid != NULL) {
    
  } else {
    
  }
  traceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), traceid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.traceId)
}

// int32 totalResult = 8;
inline void RecommendInfo::clear_totalresult() {
  totalresult_ = 0;
}
inline ::google::protobuf::int32 RecommendInfo::totalresult() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.totalResult)
  return totalresult_;
}
inline void RecommendInfo::set_totalresult(::google::protobuf::int32 value) {
  
  totalresult_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.totalResult)
}

// int32 indexBegin = 9;
inline void RecommendInfo::clear_indexbegin() {
  indexbegin_ = 0;
}
inline ::google::protobuf::int32 RecommendInfo::indexbegin() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.indexBegin)
  return indexbegin_;
}
inline void RecommendInfo::set_indexbegin(::google::protobuf::int32 value) {
  
  indexbegin_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.indexBegin)
}

// int32 indexEnd = 10;
inline void RecommendInfo::clear_indexend() {
  indexend_ = 0;
}
inline ::google::protobuf::int32 RecommendInfo::indexend() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.indexEnd)
  return indexend_;
}
inline void RecommendInfo::set_indexend(::google::protobuf::int32 value) {
  
  indexend_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.indexEnd)
}

// string query = 11;
inline void RecommendInfo::clear_query() {
  query_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::query() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.query)
  return query_.GetNoArena();
}
inline void RecommendInfo::set_query(const ::std::string& value) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.query)
}
#if LANG_CXX11
inline void RecommendInfo::set_query(::std::string&& value) {
  
  query_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.query)
}
#endif
inline void RecommendInfo::set_query(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.query)
}
inline void RecommendInfo::set_query(const char* value, size_t size) {
  
  query_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.query)
}
inline ::std::string* RecommendInfo::mutable_query() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.query)
  return query_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_query() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.query)
  
  return query_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_query(::std::string* query) {
  if (query != NULL) {
    
  } else {
    
  }
  query_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.query)
}

// map<string, string> mapContext = 12;
inline int RecommendInfo::mapcontext_size() const {
  return mapcontext_.size();
}
inline void RecommendInfo::clear_mapcontext() {
  mapcontext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RecommendInfo::mapcontext() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecommendInfo.mapContext)
  return mapcontext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RecommendInfo::mutable_mapcontext() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecommendInfo.mapContext)
  return mapcontext_.MutableMap();
}

// int64 positionId = 13;
inline void RecommendInfo::clear_positionid() {
  positionid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RecommendInfo::positionid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.positionId)
  return positionid_;
}
inline void RecommendInfo::set_positionid(::google::protobuf::int64 value) {
  
  positionid_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.positionId)
}

// double valueModifyParamA = 14;
inline void RecommendInfo::clear_valuemodifyparama() {
  valuemodifyparama_ = 0;
}
inline double RecommendInfo::valuemodifyparama() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.valueModifyParamA)
  return valuemodifyparama_;
}
inline void RecommendInfo::set_valuemodifyparama(double value) {
  
  valuemodifyparama_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.valueModifyParamA)
}

// double valueModifyParamT = 15;
inline void RecommendInfo::clear_valuemodifyparamt() {
  valuemodifyparamt_ = 0;
}
inline double RecommendInfo::valuemodifyparamt() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.valueModifyParamT)
  return valuemodifyparamt_;
}
inline void RecommendInfo::set_valuemodifyparamt(double value) {
  
  valuemodifyparamt_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.valueModifyParamT)
}

// double valueModifyParamFactor = 16;
inline void RecommendInfo::clear_valuemodifyparamfactor() {
  valuemodifyparamfactor_ = 0;
}
inline double RecommendInfo::valuemodifyparamfactor() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.valueModifyParamFactor)
  return valuemodifyparamfactor_;
}
inline void RecommendInfo::set_valuemodifyparamfactor(double value) {
  
  valuemodifyparamfactor_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.valueModifyParamFactor)
}

// .so_rtrs.SceneSubAlgInfo subAlgInfo = 17;
inline bool RecommendInfo::has_subalginfo() const {
  return this != internal_default_instance() && subalginfo_ != NULL;
}
inline void RecommendInfo::clear_subalginfo() {
  if (GetArenaNoVirtual() == NULL && subalginfo_ != NULL) {
    delete subalginfo_;
  }
  subalginfo_ = NULL;
}
inline const ::so_rtrs::SceneSubAlgInfo& RecommendInfo::_internal_subalginfo() const {
  return *subalginfo_;
}
inline const ::so_rtrs::SceneSubAlgInfo& RecommendInfo::subalginfo() const {
  const ::so_rtrs::SceneSubAlgInfo* p = subalginfo_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.subAlgInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::SceneSubAlgInfo*>(
      &::so_rtrs::_SceneSubAlgInfo_default_instance_);
}
inline ::so_rtrs::SceneSubAlgInfo* RecommendInfo::release_subalginfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.subAlgInfo)
  
  ::so_rtrs::SceneSubAlgInfo* temp = subalginfo_;
  subalginfo_ = NULL;
  return temp;
}
inline ::so_rtrs::SceneSubAlgInfo* RecommendInfo::mutable_subalginfo() {
  
  if (subalginfo_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::SceneSubAlgInfo>(GetArenaNoVirtual());
    subalginfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.subAlgInfo)
  return subalginfo_;
}
inline void RecommendInfo::set_allocated_subalginfo(::so_rtrs::SceneSubAlgInfo* subalginfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subalginfo_;
  }
  if (subalginfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      subalginfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subalginfo, submessage_arena);
    }
    
  } else {
    
  }
  subalginfo_ = subalginfo;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.subAlgInfo)
}

// string sceneInfo = 18;
inline void RecommendInfo::clear_sceneinfo() {
  sceneinfo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::sceneinfo() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.sceneInfo)
  return sceneinfo_.GetNoArena();
}
inline void RecommendInfo::set_sceneinfo(const ::std::string& value) {
  
  sceneinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.sceneInfo)
}
#if LANG_CXX11
inline void RecommendInfo::set_sceneinfo(::std::string&& value) {
  
  sceneinfo_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.sceneInfo)
}
#endif
inline void RecommendInfo::set_sceneinfo(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sceneinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.sceneInfo)
}
inline void RecommendInfo::set_sceneinfo(const char* value, size_t size) {
  
  sceneinfo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.sceneInfo)
}
inline ::std::string* RecommendInfo::mutable_sceneinfo() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.sceneInfo)
  return sceneinfo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_sceneinfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.sceneInfo)
  
  return sceneinfo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_sceneinfo(::std::string* sceneinfo) {
  if (sceneinfo != NULL) {
    
  } else {
    
  }
  sceneinfo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sceneinfo);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.sceneInfo)
}

// string positionIdStr = 19;
inline void RecommendInfo::clear_positionidstr() {
  positionidstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::positionidstr() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.positionIdStr)
  return positionidstr_.GetNoArena();
}
inline void RecommendInfo::set_positionidstr(const ::std::string& value) {
  
  positionidstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.positionIdStr)
}
#if LANG_CXX11
inline void RecommendInfo::set_positionidstr(::std::string&& value) {
  
  positionidstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.positionIdStr)
}
#endif
inline void RecommendInfo::set_positionidstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  positionidstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.positionIdStr)
}
inline void RecommendInfo::set_positionidstr(const char* value, size_t size) {
  
  positionidstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.positionIdStr)
}
inline ::std::string* RecommendInfo::mutable_positionidstr() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.positionIdStr)
  return positionidstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_positionidstr() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.positionIdStr)
  
  return positionidstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_positionidstr(::std::string* positionidstr) {
  if (positionidstr != NULL) {
    
  } else {
    
  }
  positionidstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), positionidstr);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.positionIdStr)
}

// string word_seg = 20;
inline void RecommendInfo::clear_word_seg() {
  word_seg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecommendInfo::word_seg() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecommendInfo.word_seg)
  return word_seg_.GetNoArena();
}
inline void RecommendInfo::set_word_seg(const ::std::string& value) {
  
  word_seg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecommendInfo.word_seg)
}
#if LANG_CXX11
inline void RecommendInfo::set_word_seg(::std::string&& value) {
  
  word_seg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecommendInfo.word_seg)
}
#endif
inline void RecommendInfo::set_word_seg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  word_seg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecommendInfo.word_seg)
}
inline void RecommendInfo::set_word_seg(const char* value, size_t size) {
  
  word_seg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecommendInfo.word_seg)
}
inline ::std::string* RecommendInfo::mutable_word_seg() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecommendInfo.word_seg)
  return word_seg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecommendInfo::release_word_seg() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecommendInfo.word_seg)
  
  return word_seg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecommendInfo::set_allocated_word_seg(::std::string* word_seg) {
  if (word_seg != NULL) {
    
  } else {
    
  }
  word_seg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word_seg);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecommendInfo.word_seg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecomRequest

// .so_rtrs.DeviceInfo device = 1;
inline bool RecomRequest::has_device() const {
  return this != internal_default_instance() && device_ != NULL;
}
inline void RecomRequest::clear_device() {
  if (GetArenaNoVirtual() == NULL && device_ != NULL) {
    delete device_;
  }
  device_ = NULL;
}
inline const ::so_rtrs::DeviceInfo& RecomRequest::_internal_device() const {
  return *device_;
}
inline const ::so_rtrs::DeviceInfo& RecomRequest::device() const {
  const ::so_rtrs::DeviceInfo* p = device_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.device)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::DeviceInfo*>(
      &::so_rtrs::_DeviceInfo_default_instance_);
}
inline ::so_rtrs::DeviceInfo* RecomRequest::release_device() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.device)
  
  ::so_rtrs::DeviceInfo* temp = device_;
  device_ = NULL;
  return temp;
}
inline ::so_rtrs::DeviceInfo* RecomRequest::mutable_device() {
  
  if (device_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::DeviceInfo>(GetArenaNoVirtual());
    device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.device)
  return device_;
}
inline void RecomRequest::set_allocated_device(::so_rtrs::DeviceInfo* device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete device_;
  }
  if (device) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.device)
}

// .so_rtrs.LocationInfo location = 2;
inline bool RecomRequest::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
inline void RecomRequest::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
}
inline const ::so_rtrs::LocationInfo& RecomRequest::_internal_location() const {
  return *location_;
}
inline const ::so_rtrs::LocationInfo& RecomRequest::location() const {
  const ::so_rtrs::LocationInfo* p = location_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.location)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::LocationInfo*>(
      &::so_rtrs::_LocationInfo_default_instance_);
}
inline ::so_rtrs::LocationInfo* RecomRequest::release_location() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.location)
  
  ::so_rtrs::LocationInfo* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::so_rtrs::LocationInfo* RecomRequest::mutable_location() {
  
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::LocationInfo>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.location)
  return location_;
}
inline void RecomRequest::set_allocated_location(::so_rtrs::LocationInfo* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.location)
}

// .so_rtrs.NetworkInfo network = 3;
inline bool RecomRequest::has_network() const {
  return this != internal_default_instance() && network_ != NULL;
}
inline void RecomRequest::clear_network() {
  if (GetArenaNoVirtual() == NULL && network_ != NULL) {
    delete network_;
  }
  network_ = NULL;
}
inline const ::so_rtrs::NetworkInfo& RecomRequest::_internal_network() const {
  return *network_;
}
inline const ::so_rtrs::NetworkInfo& RecomRequest::network() const {
  const ::so_rtrs::NetworkInfo* p = network_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.network)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::NetworkInfo*>(
      &::so_rtrs::_NetworkInfo_default_instance_);
}
inline ::so_rtrs::NetworkInfo* RecomRequest::release_network() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.network)
  
  ::so_rtrs::NetworkInfo* temp = network_;
  network_ = NULL;
  return temp;
}
inline ::so_rtrs::NetworkInfo* RecomRequest::mutable_network() {
  
  if (network_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::NetworkInfo>(GetArenaNoVirtual());
    network_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.network)
  return network_;
}
inline void RecomRequest::set_allocated_network(::so_rtrs::NetworkInfo* network) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_;
  }
  if (network) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network, submessage_arena);
    }
    
  } else {
    
  }
  network_ = network;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.network)
}

// .so_rtrs.RecommendInfo recommend = 4;
inline bool RecomRequest::has_recommend() const {
  return this != internal_default_instance() && recommend_ != NULL;
}
inline void RecomRequest::clear_recommend() {
  if (GetArenaNoVirtual() == NULL && recommend_ != NULL) {
    delete recommend_;
  }
  recommend_ = NULL;
}
inline const ::so_rtrs::RecommendInfo& RecomRequest::_internal_recommend() const {
  return *recommend_;
}
inline const ::so_rtrs::RecommendInfo& RecomRequest::recommend() const {
  const ::so_rtrs::RecommendInfo* p = recommend_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.recommend)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::RecommendInfo*>(
      &::so_rtrs::_RecommendInfo_default_instance_);
}
inline ::so_rtrs::RecommendInfo* RecomRequest::release_recommend() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.recommend)
  
  ::so_rtrs::RecommendInfo* temp = recommend_;
  recommend_ = NULL;
  return temp;
}
inline ::so_rtrs::RecommendInfo* RecomRequest::mutable_recommend() {
  
  if (recommend_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::RecommendInfo>(GetArenaNoVirtual());
    recommend_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.recommend)
  return recommend_;
}
inline void RecomRequest::set_allocated_recommend(::so_rtrs::RecommendInfo* recommend) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recommend_;
  }
  if (recommend) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recommend = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recommend, submessage_arena);
    }
    
  } else {
    
  }
  recommend_ = recommend;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.recommend)
}

// repeated .so_rtrs.AlgMultiTestInfo vecTestInfo = 5;
inline int RecomRequest::vectestinfo_size() const {
  return vectestinfo_.size();
}
inline ::so_rtrs::AlgMultiTestInfo* RecomRequest::mutable_vectestinfo(int index) {
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.vecTestInfo)
  return vectestinfo_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >*
RecomRequest::mutable_vectestinfo() {
  // @@protoc_insertion_point(field_mutable_list:so_rtrs.RecomRequest.vecTestInfo)
  return &vectestinfo_;
}
inline const ::so_rtrs::AlgMultiTestInfo& RecomRequest::vectestinfo(int index) const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.vecTestInfo)
  return vectestinfo_.Get(index);
}
inline ::so_rtrs::AlgMultiTestInfo* RecomRequest::add_vectestinfo() {
  // @@protoc_insertion_point(field_add:so_rtrs.RecomRequest.vecTestInfo)
  return vectestinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::so_rtrs::AlgMultiTestInfo >&
RecomRequest::vectestinfo() const {
  // @@protoc_insertion_point(field_list:so_rtrs.RecomRequest.vecTestInfo)
  return vectestinfo_;
}

// string reqId = 6;
inline void RecomRequest::clear_reqid() {
  reqid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecomRequest::reqid() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.reqId)
  return reqid_.GetNoArena();
}
inline void RecomRequest::set_reqid(const ::std::string& value) {
  
  reqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecomRequest.reqId)
}
#if LANG_CXX11
inline void RecomRequest::set_reqid(::std::string&& value) {
  
  reqid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecomRequest.reqId)
}
#endif
inline void RecomRequest::set_reqid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecomRequest.reqId)
}
inline void RecomRequest::set_reqid(const char* value, size_t size) {
  
  reqid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecomRequest.reqId)
}
inline ::std::string* RecomRequest::mutable_reqid() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.reqId)
  return reqid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecomRequest::release_reqid() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.reqId)
  
  return reqid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecomRequest::set_allocated_reqid(::std::string* reqid) {
  if (reqid != NULL) {
    
  } else {
    
  }
  reqid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reqid);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.reqId)
}

// int32 timeout = 7;
inline void RecomRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::google::protobuf::int32 RecomRequest::timeout() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.timeout)
  return timeout_;
}
inline void RecomRequest::set_timeout(::google::protobuf::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecomRequest.timeout)
}

// string appKey = 8;
inline void RecomRequest::clear_appkey() {
  appkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecomRequest::appkey() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.appKey)
  return appkey_.GetNoArena();
}
inline void RecomRequest::set_appkey(const ::std::string& value) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecomRequest.appKey)
}
#if LANG_CXX11
inline void RecomRequest::set_appkey(::std::string&& value) {
  
  appkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecomRequest.appKey)
}
#endif
inline void RecomRequest::set_appkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecomRequest.appKey)
}
inline void RecomRequest::set_appkey(const char* value, size_t size) {
  
  appkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecomRequest.appKey)
}
inline ::std::string* RecomRequest::mutable_appkey() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomRequest.appKey)
  return appkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecomRequest::release_appkey() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomRequest.appKey)
  
  return appkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecomRequest::set_allocated_appkey(::std::string* appkey) {
  if (appkey != NULL) {
    
  } else {
    
  }
  appkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), appkey);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomRequest.appKey)
}

// bool need_debug = 9;
inline void RecomRequest::clear_need_debug() {
  need_debug_ = false;
}
inline bool RecomRequest::need_debug() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomRequest.need_debug)
  return need_debug_;
}
inline void RecomRequest::set_need_debug(bool value) {
  
  need_debug_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecomRequest.need_debug)
}

// map<string, .so_rtrs.SeviceSceneInsulateInfo> sceneInsulateContext = 10;
inline int RecomRequest::sceneinsulatecontext_size() const {
  return sceneinsulatecontext_.size();
}
inline void RecomRequest::clear_sceneinsulatecontext() {
  sceneinsulatecontext_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::so_rtrs::SeviceSceneInsulateInfo >&
RecomRequest::sceneinsulatecontext() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecomRequest.sceneInsulateContext)
  return sceneinsulatecontext_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::so_rtrs::SeviceSceneInsulateInfo >*
RecomRequest::mutable_sceneinsulatecontext() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecomRequest.sceneInsulateContext)
  return sceneinsulatecontext_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RecomResponse

// int32 ret = 1;
inline void RecomResponse::clear_ret() {
  ret_ = 0;
}
inline ::google::protobuf::int32 RecomResponse::ret() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomResponse.ret)
  return ret_;
}
inline void RecomResponse::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:so_rtrs.RecomResponse.ret)
}

// string retStr = 2;
inline void RecomResponse::clear_retstr() {
  retstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecomResponse::retstr() const {
  // @@protoc_insertion_point(field_get:so_rtrs.RecomResponse.retStr)
  return retstr_.GetNoArena();
}
inline void RecomResponse::set_retstr(const ::std::string& value) {
  
  retstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:so_rtrs.RecomResponse.retStr)
}
#if LANG_CXX11
inline void RecomResponse::set_retstr(::std::string&& value) {
  
  retstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:so_rtrs.RecomResponse.retStr)
}
#endif
inline void RecomResponse::set_retstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  retstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:so_rtrs.RecomResponse.retStr)
}
inline void RecomResponse::set_retstr(const char* value, size_t size) {
  
  retstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:so_rtrs.RecomResponse.retStr)
}
inline ::std::string* RecomResponse::mutable_retstr() {
  
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomResponse.retStr)
  return retstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecomResponse::release_retstr() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomResponse.retStr)
  
  return retstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecomResponse::set_allocated_retstr(::std::string* retstr) {
  if (retstr != NULL) {
    
  } else {
    
  }
  retstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retstr);
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomResponse.retStr)
}

// .so_rtrs.RecommendInfo recomInfo = 3;
inline bool RecomResponse::has_recominfo() const {
  return this != internal_default_instance() && recominfo_ != NULL;
}
inline void RecomResponse::clear_recominfo() {
  if (GetArenaNoVirtual() == NULL && recominfo_ != NULL) {
    delete recominfo_;
  }
  recominfo_ = NULL;
}
inline const ::so_rtrs::RecommendInfo& RecomResponse::_internal_recominfo() const {
  return *recominfo_;
}
inline const ::so_rtrs::RecommendInfo& RecomResponse::recominfo() const {
  const ::so_rtrs::RecommendInfo* p = recominfo_;
  // @@protoc_insertion_point(field_get:so_rtrs.RecomResponse.recomInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::so_rtrs::RecommendInfo*>(
      &::so_rtrs::_RecommendInfo_default_instance_);
}
inline ::so_rtrs::RecommendInfo* RecomResponse::release_recominfo() {
  // @@protoc_insertion_point(field_release:so_rtrs.RecomResponse.recomInfo)
  
  ::so_rtrs::RecommendInfo* temp = recominfo_;
  recominfo_ = NULL;
  return temp;
}
inline ::so_rtrs::RecommendInfo* RecomResponse::mutable_recominfo() {
  
  if (recominfo_ == NULL) {
    auto* p = CreateMaybeMessage<::so_rtrs::RecommendInfo>(GetArenaNoVirtual());
    recominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:so_rtrs.RecomResponse.recomInfo)
  return recominfo_;
}
inline void RecomResponse::set_allocated_recominfo(::so_rtrs::RecommendInfo* recominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete recominfo_;
  }
  if (recominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      recominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, recominfo, submessage_arena);
    }
    
  } else {
    
  }
  recominfo_ = recominfo;
  // @@protoc_insertion_point(field_set_allocated:so_rtrs.RecomResponse.recomInfo)
}

// map<string, string> debug_info = 4;
inline int RecomResponse::debug_info_size() const {
  return debug_info_.size();
}
inline void RecomResponse::clear_debug_info() {
  debug_info_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RecomResponse::debug_info() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecomResponse.debug_info)
  return debug_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RecomResponse::mutable_debug_info() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecomResponse.debug_info)
  return debug_info_.MutableMap();
}

// map<string, .so_rtrs.RecomResponse> debug_info2 = 5;
inline int RecomResponse::debug_info2_size() const {
  return debug_info2_.size();
}
inline void RecomResponse::clear_debug_info2() {
  debug_info2_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::so_rtrs::RecomResponse >&
RecomResponse::debug_info2() const {
  // @@protoc_insertion_point(field_map:so_rtrs.RecomResponse.debug_info2)
  return debug_info2_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::so_rtrs::RecomResponse >*
RecomResponse::mutable_debug_info2() {
  // @@protoc_insertion_point(field_mutable_map:so_rtrs.RecomResponse.debug_info2)
  return debug_info2_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace so_rtrs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::so_rtrs::SCENE_CMD_ID> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_recommend_2eproto
