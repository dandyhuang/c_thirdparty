// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtrs_abtest.proto

#include "rtrs_abtest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_rtrs_5fexpinfo_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_rtrs_5fexpinfo_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_AlgMultiTestInfo;
}  // namespace protobuf_rtrs_5fexpinfo_2eproto
namespace so_rtrs {
class AbtestReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbtestReq>
      _instance;
} _AbtestReq_default_instance_;
class AbtestRspDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AbtestRsp>
      _instance;
} _AbtestRsp_default_instance_;
}  // namespace so_rtrs
namespace protobuf_rtrs_5fabtest_2eproto {
static void InitDefaultsAbtestReq() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::so_rtrs::_AbtestReq_default_instance_;
    new (ptr) ::so_rtrs::AbtestReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::so_rtrs::AbtestReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AbtestReq =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAbtestReq}, {}};

static void InitDefaultsAbtestRsp() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::so_rtrs::_AbtestRsp_default_instance_;
    new (ptr) ::so_rtrs::AbtestRsp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::so_rtrs::AbtestRsp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AbtestRsp =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAbtestRsp}, {
      &protobuf_rtrs_5fexpinfo_2eproto::scc_info_AlgMultiTestInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AbtestReq.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AbtestRsp.base);
}

}  // namespace protobuf_rtrs_5fabtest_2eproto
namespace so_rtrs {

// ===================================================================

void AbtestReq::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbtestReq::kSceneidFieldNumber;
const int AbtestReq::kUseridFieldNumber;
const int AbtestReq::kHashidFieldNumber;
const int AbtestReq::kPageRecognizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbtestReq::AbtestReq()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtrs_5fabtest_2eproto::scc_info_AbtestReq.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:so_rtrs.AbtestReq)
}
AbtestReq::AbtestReq(const AbtestReq& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.userid().size() > 0) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hashid().size() > 0) {
    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  page_recognize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_recognize().size() > 0) {
    page_recognize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_recognize_);
  }
  sceneid_ = from.sceneid_;
  // @@protoc_insertion_point(copy_constructor:so_rtrs.AbtestReq)
}

void AbtestReq::SharedCtor() {
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_recognize_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_ = GOOGLE_ULONGLONG(0);
}

AbtestReq::~AbtestReq() {
  // @@protoc_insertion_point(destructor:so_rtrs.AbtestReq)
  SharedDtor();
}

void AbtestReq::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_recognize_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AbtestReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbtestReq& AbtestReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtrs_5fabtest_2eproto::scc_info_AbtestReq.base);
  return *internal_default_instance();
}


void AbtestReq::Clear() {
// @@protoc_insertion_point(message_clear_start:so_rtrs.AbtestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hashid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_recognize_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sceneid_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool AbtestReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:so_rtrs.AbtestReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 sceneid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string userid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AbtestReq.userid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hashid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hashid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hashid().data(), static_cast<int>(this->hashid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AbtestReq.hashid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_recognize = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_recognize()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_recognize().data(), static_cast<int>(this->page_recognize().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AbtestReq.page_recognize"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:so_rtrs.AbtestReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:so_rtrs.AbtestReq)
  return false;
#undef DO_
}

void AbtestReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:so_rtrs.AbtestReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // string userid = 2;
  if (this->userid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "so_rtrs.AbtestReq.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  // string hashid = 3;
  if (this->hashid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hashid().data(), static_cast<int>(this->hashid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "so_rtrs.AbtestReq.hashid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hashid(), output);
  }

  // string page_recognize = 4;
  if (this->page_recognize().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_recognize().data(), static_cast<int>(this->page_recognize().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "so_rtrs.AbtestReq.page_recognize");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_recognize(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:so_rtrs.AbtestReq)
}

size_t AbtestReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:so_rtrs.AbtestReq)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // string userid = 2;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  // string hashid = 3;
  if (this->hashid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hashid());
  }

  // string page_recognize = 4;
  if (this->page_recognize().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_recognize());
  }

  // uint64 sceneid = 1;
  if (this->sceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->sceneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbtestReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbtestReq*>(&from));
}

void AbtestReq::MergeFrom(const AbtestReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:so_rtrs.AbtestReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {

    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  if (from.hashid().size() > 0) {

    hashid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hashid_);
  }
  if (from.page_recognize().size() > 0) {

    page_recognize_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_recognize_);
  }
  if (from.sceneid() != 0) {
    set_sceneid(from.sceneid());
  }
}

void AbtestReq::CopyFrom(const AbtestReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:so_rtrs.AbtestReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbtestReq::IsInitialized() const {
  return true;
}

void AbtestReq::Swap(AbtestReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbtestReq::InternalSwap(AbtestReq* other) {
  using std::swap;
  userid_.Swap(&other->userid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hashid_.Swap(&other->hashid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_recognize_.Swap(&other->page_recognize_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sceneid_, other->sceneid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AbtestReq::GetTypeName() const {
  return "so_rtrs.AbtestReq";
}


// ===================================================================

void AbtestRsp::InitAsDefaultInstance() {
}
void AbtestRsp::clear_page_items() {
  page_items_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbtestRsp::kPageItemsFieldNumber;
const int AbtestRsp::kDebugErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbtestRsp::AbtestRsp()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_rtrs_5fabtest_2eproto::scc_info_AbtestRsp.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:so_rtrs.AbtestRsp)
}
AbtestRsp::AbtestRsp(const AbtestRsp& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      page_items_(from.page_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.debug_error().size() > 0) {
    debug_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_error_);
  }
  // @@protoc_insertion_point(copy_constructor:so_rtrs.AbtestRsp)
}

void AbtestRsp::SharedCtor() {
  debug_error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AbtestRsp::~AbtestRsp() {
  // @@protoc_insertion_point(destructor:so_rtrs.AbtestRsp)
  SharedDtor();
}

void AbtestRsp::SharedDtor() {
  debug_error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AbtestRsp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbtestRsp& AbtestRsp::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_rtrs_5fabtest_2eproto::scc_info_AbtestRsp.base);
  return *internal_default_instance();
}


void AbtestRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:so_rtrs.AbtestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_items_.Clear();
  debug_error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool AbtestRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:so_rtrs.AbtestRsp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .so_rtrs.AlgMultiTestInfo page_items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_page_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string debug_error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_error()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->debug_error().data(), static_cast<int>(this->debug_error().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "so_rtrs.AbtestRsp.debug_error"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:so_rtrs.AbtestRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:so_rtrs.AbtestRsp)
  return false;
#undef DO_
}

void AbtestRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:so_rtrs.AbtestRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .so_rtrs.AlgMultiTestInfo page_items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->page_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->page_items(static_cast<int>(i)),
      output);
  }

  // string debug_error = 2;
  if (this->debug_error().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->debug_error().data(), static_cast<int>(this->debug_error().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "so_rtrs.AbtestRsp.debug_error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->debug_error(), output);
  }

  output->WriteRaw((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).data(),
                   static_cast<int>((::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size()));
  // @@protoc_insertion_point(serialize_end:so_rtrs.AbtestRsp)
}

size_t AbtestRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:so_rtrs.AbtestRsp)
  size_t total_size = 0;

  total_size += (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()).size();

  // repeated .so_rtrs.AlgMultiTestInfo page_items = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->page_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->page_items(static_cast<int>(i)));
    }
  }

  // string debug_error = 2;
  if (this->debug_error().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug_error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbtestRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AbtestRsp*>(&from));
}

void AbtestRsp::MergeFrom(const AbtestRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:so_rtrs.AbtestRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_items_.MergeFrom(from.page_items_);
  if (from.debug_error().size() > 0) {

    debug_error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_error_);
  }
}

void AbtestRsp::CopyFrom(const AbtestRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:so_rtrs.AbtestRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbtestRsp::IsInitialized() const {
  return true;
}

void AbtestRsp::Swap(AbtestRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbtestRsp::InternalSwap(AbtestRsp* other) {
  using std::swap;
  CastToBase(&page_items_)->InternalSwap(CastToBase(&other->page_items_));
  debug_error_.Swap(&other->debug_error_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AbtestRsp::GetTypeName() const {
  return "so_rtrs.AbtestRsp";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace so_rtrs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::so_rtrs::AbtestReq* Arena::CreateMaybeMessage< ::so_rtrs::AbtestReq >(Arena* arena) {
  return Arena::CreateInternal< ::so_rtrs::AbtestReq >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::so_rtrs::AbtestRsp* Arena::CreateMaybeMessage< ::so_rtrs::AbtestRsp >(Arena* arena) {
  return Arena::CreateInternal< ::so_rtrs::AbtestRsp >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
